{"version":3,"sources":["serviceWorker.js","components/Header/Header.styles.js","theme/theme.reducer.js","components/Header/Header.js","API/API.js","components/Home/celciumConverter.actions.js","theme/theme.js","components/Home/Home.styles.js","components/Home/Home.js","components/Home/Home.actions.js","components/Favorites/Favorites.actions.js","components/Favorites/Favorites.styles.js","components/Favorites/Favorites.js","components/App.js","Root.js","middleware/logger.js","enhancers/monitorReducer.js","components/Home/Home.reducer.js","components/Favorites/Favorites.reducer.js","configureStore/root.reducer.js","index.js","configureStore/index.js"],"names":["Boolean","window","location","hostname","match","AppContainer","withStyles","root","position","boxShadow","backgroundColor","AppBar","HTitle","color","fontWeight","flexGrow","whiteSpace","Typography","HButton","marginLeft","textDecoration","Button","ThemeButton","border","borderRadius","ToggleButton","ThemeIcon","BrightnessMediumRoundedIcon","initialState","themeMode","mode","backGround","AdapterLink","React","forwardRef","props","ref","innerRef","Header","state","selected","changeThemeHandler","doChangeTheme","setState","this","Toolbar","to","component","value","onChange","Component","connect","dispatch","type","changeTheme","API_KEY","process","API_HOST","autoCompleteUrl","query","autoCompleteUrlFiveDay","cityKey","autoCompleteUrlGeoPosition","lat","lon","autoCompleteUrlCurrentCondition","getAutoComplete","a","axios","get","response","data","console","log","getGeoPosition","getDailyForecast","getFiveDayForecast","theme","createMuiTheme","overrides","MuiAppBar","colorPrimary","MuiCardContent","borderBottomColor","padding","asyncStyles","container","provided","display","margin","width","control","placeholder","fontSize","menu","input","singleValue","ForecastContainer","maxWidth","flexDirection","alignItems","breakpoints","down","height","Container","OneDayGridContainer","justifyContent","minWidth","Grid","OneDayWidget","OneDayCityFavBtnGrid","flexWrap","OneDayTempIcnGrid","TypographyCity","TypographyDate","TypographyTemp","ToggleFahrCel","AvatarIcon","alignSelf","Avatar","FButton","FIcon","FavoriteIcon","FTypography","fontFamily","FiveDayGridCont","marginTop","overflow","FiveDayGridItem","marginBottom","FiveDayGrid","TypographyDay","TypographyMin","TypographyMax","Home","favColor","measure","loading","addFavoritesHandler","city","doAddFavoritesHandler","checkCityInFav","fav","localStorage","item","changeMeasurementHandler","event","newMeasure","obj","daily","doConvertCelsToFahr","doConvertFahrToCels","doLoadDailyForecast","doLoadFiveDayForecast","oneDay","setTimeout","prevProps","prevState","doLoadCitiesList","doGetSelectedCity","selectedCity","favoritesBtn","styles","loadOptions","Skeleton","variant","style","onClick","date","metricTemp","imperialTemp","ToggleButtonGroup","exclusive","size","marginRight","src","weatherIcon","alt","text","map","d","key","fiveDayIcon","min","max","home","notification","then","payload","catch","err","message","loadDailyForecast","loadFiveDayForecast","inputValue","callback","tempArr","forEach","i","push","label","LocalizedName","Key","loadCitiesList","getSelectedCity","setItem","addToFavorites","tmp","Math","round","convertCelsToFahr","convertFahrToCels","FDIcon","cursor","DeleteIcon","FGrid","maxHeight","ItemGrid","Card","Favorites","getFavoriteCityHandler","doLoadFavoritesCity","history","deleteFavoritesHandler","arr","favorites","doDeleteFavoritesCity","length","doLoadFavoritesList","favorite","Object","entries","removeItem","deleteFavoritesCity","loadFavoritesCity","App","Fragment","exact","path","title","Root","darkTheme","MuiCssBaseline","html","body","backgroundImage","palette","store","CssBaseline","logger","next","action","group","info","result","getState","groupEnd","monitorReducerEnhancer","createStore","reducer","enhancer","number","start","performance","now","newState","end","diff","rootReducer","combineReducers","weekday","Date","LocalObservationDateTime","Temperature","Metric","Value","Imperial","WeatherText","oneDayIcon","WeatherIcon","getDay","getHours","getMinutes","shortWeekday","DailyForecasts","Maximum","Minimum","Day","Icon","fiveDaysArr","middlewares","thunkMiddleware","loggerMiddleware","enhancers","applyMiddleware","monitorReducersEnhancer","composedEnhansers","composeWithDevTools","configureStore","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","alert","coords","latitude","longitude","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7103458e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { withStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport ToggleButton from '@material-ui/lab/ToggleButton'\r\nimport BrightnessMediumRoundedIcon from '@material-ui/icons/BrightnessMediumRounded'\r\n\r\nexport const AppContainer = withStyles({\r\n    root: {\r\n        position: 'static',\r\n        boxShadow: 'none',\r\n        backgroundColor: 'transparent'\r\n    }\r\n})(AppBar)\r\nexport const HTitle = withStyles({\r\n    root: {\r\n        color: 'grey',\r\n        fontWeight: 600,\r\n        flexGrow: 1,\r\n        whiteSpace: 'nowrap'\r\n    }\r\n})(Typography)\r\nexport const HButton = withStyles({\r\n    root: {\r\n        color: 'grey',\r\n        marginLeft: '5px',\r\n        textDecoration: 'none',\r\n        fontWeight: 400\r\n    }\r\n})(Button)\r\nexport const ThemeButton = withStyles({\r\n    root: {\r\n        border: 'none',\r\n        borderRadius: '25px'\r\n    }\r\n})(ToggleButton)\r\nexport const ThemeIcon = withStyles({\r\n    root: {}\r\n})(BrightnessMediumRoundedIcon)\r\n","const DARK_THEME = 'DARK_THEME'\r\nconst LIGHT_THEME = 'LIGHT_THEME'\r\n\r\nlet initialState = {\r\n    themeMode: {\r\n        mode: 'light',\r\n        backGround: 'linear-gradient(to bottom right, #36516f, #394655, #2b3541)'\r\n    }\r\n}\r\nexport const changeTheme = selected => {\r\n    return dispatch => {\r\n        if (!selected) {\r\n            dispatch({ type: DARK_THEME })\r\n        } else {\r\n            dispatch({ type: LIGHT_THEME })\r\n        }\r\n    }\r\n}\r\nexport const themeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LIGHT_THEME:\r\n            return {\r\n                ...state,\r\n                themeMode: {\r\n                    mode: 'light',\r\n                    backGround: 'linear-gradient(to bottom right, #36516f, #394655, #2b3541)'\r\n                }\r\n            }\r\n        case DARK_THEME:\r\n            return {\r\n                ...state,\r\n                themeMode: {\r\n                    mode: 'dark',\r\n                    backGround: 'linear-gradient(to bottom right, #333030, #303030, #1d1b1b)'\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { AppContainer, HTitle, HButton, ThemeButton, ThemeIcon } from './Header.styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\n\r\nimport { changeTheme } from '../../theme/theme.reducer'\r\n\r\nconst AdapterLink = React.forwardRef((props, ref) => <Link innerRef={ref} {...props} />)\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        selected: false\r\n    }\r\n    changeThemeHandler = () => {\r\n        let selected = this.state.selected\r\n        if (!selected) {\r\n            this.props.doChangeTheme(selected)\r\n            this.setState({\r\n                selected: true\r\n            })\r\n        } else {\r\n            this.props.doChangeTheme(selected)\r\n            this.setState({\r\n                selected: false\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const { selected } = this.state\r\n        return (\r\n            <AppContainer>\r\n                <Toolbar>\r\n                    <HTitle>Forecast Application</HTitle>\r\n                    <HButton to='/' component={AdapterLink}>\r\n                        HOME\r\n                    </HButton>\r\n                    <HButton to='/favorites' component={AdapterLink}>\r\n                        FAVORITES\r\n                    </HButton>\r\n                    <ThemeButton value='ThemeIcon' onChange={this.changeThemeHandler} selected={selected}>\r\n                        <ThemeIcon />\r\n                    </ThemeButton>\r\n                </Toolbar>\r\n            </AppContainer>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        doChangeTheme: selected => dispatch(changeTheme(selected))\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(Header)\r\n","import axios from 'axios'\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY\r\nconst API_HOST = process.env.REACT_APP_API_HOST\r\nconst API_VERSION = process.env.REACT_APP_API_VERSION\r\n\r\nconst autoCompleteUrl = query => `${API_HOST}/locations/${API_VERSION}/cities/autocomplete?apikey=${API_KEY}&q=${query}`\r\nconst autoCompleteUrlFiveDay = cityKey => `${API_HOST}/forecasts/${API_VERSION}/daily/5day/${cityKey}?apikey=${API_KEY}&metric=true`\r\nconst autoCompleteUrlGeoPosition = (lat, lon) => `${API_HOST}/locations/${API_VERSION}/cities/geoposition/search?apikey=${API_KEY}&q=${lat}%20%2C%20${lon}%20&toplevel=false`\r\nconst autoCompleteUrlCurrentCondition = cityKey => `${API_HOST}/currentconditions/${API_VERSION}/${cityKey}?apikey=${API_KEY}`\r\n\r\nexport const getAutoComplete = async query => {\r\n    try {\r\n        const response = await axios.get(autoCompleteUrl(query))\r\n        const data = await response.data\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nexport const getGeoPosition = async (lat, lon) => {\r\n    try {\r\n        const response = await axios.get(autoCompleteUrlGeoPosition(lat, lon))\r\n        const data = await response.data\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nexport const getDailyForecast = async cityKey => {\r\n    try {\r\n        const response = await axios.get(autoCompleteUrlCurrentCondition(cityKey))\r\n        const data = await response.data\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nexport const getFiveDayForecast = async cityKey => {\r\n    try {\r\n        const response = await axios.get(autoCompleteUrlFiveDay(cityKey))\r\n        const data = await response.data\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n","export const CONVERT_TO_CELSIUM = 'CONVERT_TO_CELSIUM'\r\nexport const CONVERT_TO_FAHRENHEIT = 'CONVERT_TO_FAHRENHEIT'\r\n\r\nexport const convertCelsToFahr = obj => {\r\n    return dispatch => {\r\n        const tmp = []\r\n        obj.forEach(i => {\r\n            const min = Math.round(i.min * 1.8 + 32)\r\n            const max = Math.round(i.max * 1.8 + 32)\r\n            const obj = {\r\n                ...i,\r\n                min: min,\r\n                max: max\r\n            }\r\n            return tmp.push(obj)\r\n        })\r\n        dispatch({\r\n            type: CONVERT_TO_FAHRENHEIT,\r\n            payload: tmp\r\n        })\r\n    }\r\n}\r\nexport const convertFahrToCels = obj => {\r\n    return dispatch => {\r\n        const tmp = []\r\n        obj.forEach(i => {\r\n            const min = Math.round((i.min - 32) * 0.555)\r\n            const max = Math.round((i.max - 32) * 0.555)\r\n            const obj = {\r\n                ...i,\r\n                min: min,\r\n                max: max\r\n            }\r\n            return tmp.push(obj)\r\n        })\r\n        dispatch({\r\n            type: CONVERT_TO_FAHRENHEIT,\r\n            payload: tmp\r\n        })\r\n    }\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiAppBar: {\r\n            root: {\r\n                border: 'none',\r\n                boxShadow: 'none'\r\n            },\r\n            colorPrimary: {\r\n                backgroundColor: 'transparent'\r\n            }\r\n        },\r\n        MuiCardContent: {\r\n            root: {\r\n                borderBottomColor: 'none',\r\n                '&:last-child': {\r\n                    padding: '1rem !important'\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\nexport const asyncStyles = {\r\n    container: provided => ({\r\n        ...provided,\r\n        display: 'flex',\r\n        margin: '1.25rem 0',\r\n        width: '30rem'\r\n    }),\r\n    control: provided => ({\r\n        ...provided,\r\n        width: '100%',\r\n        backgroundColor: 'transparent',\r\n        border: '1px solid #526984',\r\n        borderRadius: '10px'\r\n    }),\r\n    placeholder: provided => ({\r\n        ...provided,\r\n        fontSize: '1.2rem'\r\n    }),\r\n    menu: provided => ({\r\n        ...provided,\r\n        fontSize: '1.2rem',\r\n        color: '#808080',\r\n        backgroundColor: 'transparent',\r\n        fontWeight: 500\r\n    }),\r\n    input: provided => ({\r\n        ...provided,\r\n        fontSize: '1rem',\r\n        color: '#808080'\r\n    }),\r\n    singleValue: provided => ({\r\n        ...provided,\r\n        color: '#808080',\r\n        fontSize: '1.2rem'\r\n    })\r\n}\r\nexport default theme\r\n","import { withStyles } from '@material-ui/core/styles'\r\nimport theme from './../../theme/theme'\r\nimport Container from '@material-ui/core/Container'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport ToggleButton from '@material-ui/lab/ToggleButton'\r\n\r\nexport const ForecastContainer = withStyles({\r\n    root: {\r\n        maxWidth: '70%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '0 0 2rem',\r\n        borderRadius: '25px',\r\n        border: '1px solid #526984',\r\n        alignItems: 'center',\r\n        [theme.breakpoints.down('xs')]: {\r\n            border: 'none',\r\n            maxWidth: '100%',\r\n            height: '100%'\r\n        }\r\n    }\r\n})(Container)\r\nexport const OneDayGridContainer = withStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        minWidth: '16.875rem',\r\n        padding: '0 1.6rem 2rem',\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: '100%',\r\n            padding: '0 1rem'\r\n        }\r\n    }\r\n})(Grid)\r\nexport const OneDayWidget = withStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minWidth: '42%',\r\n        padding: '10px 20px',\r\n        borderRadius: '25px',\r\n        border: '1px solid #526984',\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: '100%'\r\n        }\r\n    }\r\n})(Grid)\r\nexport const OneDayCityFavBtnGrid = withStyles({\r\n    root: {\r\n        justifyContent: 'space-between',\r\n        flexWrap: 'nowrap',\r\n        display: 'flex'\r\n    }\r\n})(Grid)\r\nexport const OneDayTempIcnGrid = withStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n})(Grid)\r\nexport const TypographyCity = withStyles({\r\n    root: {\r\n        fontSize: '2rem',\r\n        color: 'white',\r\n        fontWeight: 500,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap'\r\n    }\r\n})(Typography)\r\nexport const TypographyDate = withStyles({\r\n    root: {\r\n        fontSize: '1.5rem',\r\n        color: 'white',\r\n        fontWeight: 100\r\n    }\r\n})(Typography)\r\nexport const TypographyTemp = withStyles({\r\n    root: {\r\n        display: 'inline-flex',\r\n        fontSize: '5.5rem',\r\n        alignItems: 'center',\r\n        color: 'white',\r\n        fontWeight: 100\r\n    }\r\n})(Typography)\r\nexport const ToggleFahrCel = withStyles({\r\n    root: {\r\n        fontSize: '1.3rem',\r\n        fontWeight: 300,\r\n        color: 'grey'\r\n    }\r\n})(ToggleButton)\r\nexport const AvatarIcon = withStyles({\r\n    root: {\r\n        alignSelf: 'center'\r\n    }\r\n})(Avatar)\r\nexport const FButton = withStyles({\r\n    root: {\r\n        whiteSpace: 'nowrap',\r\n        color: 'white',\r\n        borderRadius: '10px',\r\n        border: '1px solid #526984',\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'none'\r\n        }\r\n    }\r\n})(Button)\r\nexport const FIcon = withStyles({\r\n    root: {\r\n        display: 'none',\r\n        [theme.breakpoints.down('xs')]: {\r\n            display: 'inline-block',\r\n            fontSize: '2.5rem'\r\n        }\r\n    }\r\n})(FavoriteIcon)\r\nexport const FTypography = withStyles({\r\n    root: {\r\n        fontSize: '2rem',\r\n        display: 'flex',\r\n        fontFamily: 'inherit',\r\n        alignItems: 'center',\r\n        color: 'white',\r\n        justifyContent: 'flex-end'\r\n    }\r\n})(Typography)\r\nexport const FiveDayGridCont = withStyles({\r\n    root: {\r\n        justifyContent: 'space-evenly',\r\n        display: 'flex',\r\n        marginTop: '3rem',\r\n        [theme.breakpoints.down('xs')]: {\r\n            flexDirection: 'column',\r\n            overflow: 'scroll',\r\n            height: '56vh',\r\n            flexWrap: 'inherit',\r\n            justifyContent: 'flex-start',\r\n            marginTop: '1rem',\r\n            padding: '0 1rem'\r\n        }\r\n    }\r\n})(Grid)\r\n\r\nexport const FiveDayGridItem = withStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '20px',\r\n        minWidth: '9rem',\r\n        borderRadius: '25px',\r\n        border: '1px solid #526984',\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginBottom: '1rem'\r\n        }\r\n    }\r\n})(Grid)\r\nexport const FiveDayGrid = withStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    }\r\n})(Grid)\r\nexport const TypographyDay = withStyles({\r\n    root: {\r\n        fontWeight: 500,\r\n        color: 'white',\r\n        alignSelf: 'center',\r\n        fontSize: '2rem'\r\n    }\r\n})(Typography)\r\nexport const TypographyMin = withStyles({\r\n    root: {\r\n        fontWeight: 400,\r\n        color: 'white',\r\n        alignSelf: 'center',\r\n        fontSize: '1.5rem'\r\n    }\r\n})(Typography)\r\nexport const TypographyMax = withStyles({\r\n    root: {\r\n        fontWeight: 400,\r\n        color: 'white',\r\n        alignSelf: 'center',\r\n        fontSize: '1.5rem'\r\n    }\r\n})(Typography)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { loadDailyForecast, loadFiveDayForecast, loadCitiesList, getSelectedCity } from './Home.actions'\r\nimport { addToFavorites } from '../Favorites/Favorites.actions'\r\nimport { convertCelsToFahr, convertFahrToCels } from '../Home/celciumConverter.actions'\r\n\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup'\r\nimport { Grid } from '@material-ui/core'\r\nimport AsyncSelect from 'react-select/async'\r\n\r\nimport { asyncStyles } from '../../theme/theme'\r\nimport {\r\n    FIcon,\r\n    AvatarIcon,\r\n    OneDayWidget,\r\n    OneDayCityFavBtnGrid,\r\n    OneDayTempIcnGrid,\r\n    TypographyCity,\r\n    FiveDayGrid,\r\n    FiveDayGridCont,\r\n    FiveDayGridItem,\r\n    TypographyDate,\r\n    TypographyTemp,\r\n    ForecastContainer,\r\n    OneDayGridContainer,\r\n    FButton,\r\n    FTypography,\r\n    TypographyDay,\r\n    TypographyMax,\r\n    TypographyMin,\r\n    ToggleFahrCel\r\n} from './Home.styles'\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nclass Home extends Component {\r\n    state = {\r\n        favColor: false,\r\n        measure: 'celsium',\r\n        loading: true\r\n    }\r\n    componentDidMount() {\r\n        const { city, cityKey, doLoadDailyForecast, doLoadFiveDayForecast, daily, oneDay } = this.props\r\n        if (daily && oneDay) {\r\n            setTimeout(() => {\r\n                return this.setState({\r\n                    loading: false\r\n                })\r\n            }, 2500)\r\n        }\r\n        if (cityKey) {\r\n            doLoadFiveDayForecast(cityKey)\r\n            doLoadDailyForecast(cityKey)\r\n        }\r\n        if (city) {\r\n            this.checkCityInFav(city)\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { city, cityKey, doLoadDailyForecast, doLoadFiveDayForecast } = this.props\r\n        if (this.props.cityKey !== prevProps.cityKey) {\r\n            doLoadFiveDayForecast(cityKey)\r\n            doLoadDailyForecast(cityKey)\r\n        }\r\n        if (this.props.city !== prevProps.city) {\r\n            this.checkCityInFav(city)\r\n        }\r\n    }\r\n    addFavoritesHandler = () => {\r\n        const { city, cityKey, doAddFavoritesHandler } = this.props\r\n        doAddFavoritesHandler(city, cityKey)\r\n        this.setState({\r\n            favColor: true\r\n        })\r\n    }\r\n    checkCityInFav = city => {\r\n        let fav = { ...localStorage }\r\n        for (let item in fav) {\r\n            if (item === city) {\r\n                return this.setState({\r\n                    favColor: true\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    favColor: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n    changeMeasurementHandler = (event, newMeasure) => {\r\n        const obj = this.props.daily\r\n        switch (newMeasure) {\r\n            case 'fahrenheit':\r\n                this.props.doConvertCelsToFahr(obj)\r\n                return this.setState({\r\n                    measure: 'fahrenheit'\r\n                })\r\n            case 'celsium':\r\n                this.props.doConvertFahrToCels(obj)\r\n                return this.setState({\r\n                    measure: 'celsium'\r\n                })\r\n            default:\r\n                return this.state\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { oneDay, daily, city } = this.props\r\n        const { doLoadCitiesList, doGetSelectedCity, selectedCity } = this.props\r\n        const { favColor, measure, loading } = this.state\r\n        const favoritesBtn = { color: favColor ? 'red' : '' }\r\n        return (\r\n            <ForecastContainer>\r\n                <AsyncSelect styles={asyncStyles} value={selectedCity} loadOptions={doLoadCitiesList} onChange={doGetSelectedCity} />\r\n                <OneDayGridContainer container>\r\n                    <OneDayWidget item>\r\n                        <OneDayCityFavBtnGrid item>\r\n                            {loading ? (\r\n                                <Skeleton\r\n                                    variant='text'\r\n                                    width={190}\r\n                                    style={{\r\n                                        fontSize: '2rem',\r\n                                        borderRadius: '10px'\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <>\r\n                                    <TypographyCity>{city ? city : 'City'}</TypographyCity>\r\n                                    <FIcon\r\n                                        style={{\r\n                                            color: favColor ? 'red' : '',\r\n                                            alignSelf: 'center'\r\n                                        }}\r\n                                        onClick={this.addFavoritesHandler}\r\n                                    />\r\n                                </>\r\n                            )}\r\n                        </OneDayCityFavBtnGrid>\r\n                        {loading ? (\r\n                            <Skeleton\r\n                                variant='text'\r\n                                width={120}\r\n                                style={{\r\n                                    fontSize: '1.5rem',\r\n                                    borderRadius: '10px'\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                            <TypographyDate>{oneDay.date}</TypographyDate>\r\n                        )}\r\n                        <OneDayTempIcnGrid container>\r\n                            <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n                                {loading ? (\r\n                                    <Skeleton\r\n                                        variant='text'\r\n                                        width={200}\r\n                                        style={{\r\n                                            fontSize: '5.5rem',\r\n                                            borderRadius: '10px'\r\n                                        }}\r\n                                    />\r\n                                ) : (\r\n                                    <TypographyTemp>{measure === 'celsium' ? oneDay.metricTemp : oneDay.imperialTemp}</TypographyTemp>\r\n                                )}\r\n                                {loading ? null : (\r\n                                    <ToggleButtonGroup\r\n                                        exclusive\r\n                                        onChange={this.changeMeasurementHandler}\r\n                                        value={measure}\r\n                                        size='medium'\r\n                                        style={{\r\n                                            alignSelf: 'center',\r\n                                            backgroundColor: 'transparent'\r\n                                        }}\r\n                                    >\r\n                                        <ToggleFahrCel value='celsium'>{'C°'}</ToggleFahrCel>\r\n                                        <ToggleFahrCel value='fahrenheit'>{'F°'}</ToggleFahrCel>\r\n                                    </ToggleButtonGroup>\r\n                                )}\r\n                            </div>\r\n                            {loading ? (\r\n                                <div\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'flex-end'\r\n                                    }}\r\n                                >\r\n                                    <Skeleton\r\n                                        variant='circle'\r\n                                        width={40}\r\n                                        height={40}\r\n                                        style={{\r\n                                            marginRight: '14px'\r\n                                        }}\r\n                                    />\r\n                                    <Skeleton\r\n                                        variant='text'\r\n                                        width={120}\r\n                                        style={{\r\n                                            fontSize: '2rem',\r\n                                            borderRadius: '10px'\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                <FTypography component='div'>\r\n                                    <AvatarIcon src={'https://raw.githubusercontent.com/SejoB/Sergey-Bekker-04-09-2019/master/public/weatherIcons/' + oneDay.weatherIcon + '-s.png'} alt='icon' />\r\n                                    {oneDay.text}\r\n                                </FTypography>\r\n                            )}\r\n                        </OneDayTempIcnGrid>\r\n                    </OneDayWidget>\r\n                    <Grid item>\r\n                        <FButton style={favoritesBtn} onClick={this.addFavoritesHandler}>\r\n                            Add to Favorites\r\n                        </FButton>\r\n                    </Grid>\r\n                </OneDayGridContainer>\r\n                <FiveDayGridCont container>\r\n                    {daily.map((d, key) => {\r\n                        return (\r\n                            <FiveDayGridItem key={key} item>\r\n                                {loading ? (\r\n                                    <Skeleton variant='circle' style={{ width: '40px', height: '40px', alignSelf: 'center' }} />\r\n                                ) : (\r\n                                    <AvatarIcon src={'https://raw.githubusercontent.com/SejoB/Sergey-Bekker-04-09-2019/master/public/weatherIcons/' + d.fiveDayIcon + '-s.png'} alt='icon' />\r\n                                )}\r\n                                {loading ? <Skeleton variant='text' style={{ height: '48px', width: '54px', borderRadius: '10px', alignSelf: 'center' }} /> : <TypographyDay>{d.date}</TypographyDay>}\r\n                                {loading ? (\r\n                                    <Skeleton variant='text' style={{ height: '35px', width: '102px', borderRadius: '10px', alignSelf: 'center' }} />\r\n                                ) : (\r\n                                    <FiveDayGrid container>\r\n                                        <TypographyMin>\r\n                                            {d.min}\r\n                                            {'°'}\r\n                                        </TypographyMin>\r\n                                        <TypographyMax>\r\n                                            {d.max}\r\n                                            {'°'}\r\n                                        </TypographyMax>\r\n                                    </FiveDayGrid>\r\n                                )}\r\n                            </FiveDayGridItem>\r\n                        )\r\n                    })}\r\n                </FiveDayGridCont>\r\n            </ForecastContainer>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    const { cityKey, city, oneDay, daily, notification } = state.home\r\n    return {\r\n        cityKey,\r\n        city,\r\n        oneDay,\r\n        daily,\r\n        notification\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        doLoadDailyForecast: cityKey => dispatch(loadDailyForecast(cityKey)),\r\n        doLoadFiveDayForecast: cityKey => dispatch(loadFiveDayForecast(cityKey)),\r\n        doLoadCitiesList: (inputValue, callback) => dispatch(loadCitiesList(inputValue, callback)),\r\n        doGetSelectedCity: selectedCity => dispatch(getSelectedCity(selectedCity)),\r\n        doAddFavoritesHandler: (city, cityKey) => dispatch(addToFavorites(city, cityKey)),\r\n        doConvertCelsToFahr: obj => dispatch(convertCelsToFahr(obj)),\r\n        doConvertFahrToCels: obj => dispatch(convertFahrToCels(obj))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\r\n","import { getDailyForecast, getFiveDayForecast, getGeoPosition, getAutoComplete } from '../../API/API'\r\n\r\nexport const FETCHING_LOCATION = 'FETCHING_LOCATION'\r\nexport const FETCHED_LOCATION = 'FETCHED_LOCATION'\r\nexport const LOCATION_ERROR = 'LOCATION_ERROR'\r\n\r\nexport const LOADING_DAILY_FORECAST = 'LOADING_DAILY_FORECAST'\r\nexport const DAILY_FORECAST_LOADED = 'DAILY_FORECAST_LOADED'\r\nexport const DAILY_FORECAST_ERROR = 'DAILY_FORECAST_ERROR'\r\n\r\nexport const LOADING_FIVE_DAY_FORECAST = 'LOADING_FIVE_DAY_FORECAST'\r\nexport const FIVE_DAY_FORECAST_LOADED = 'FIVE_DAY_FORECAST_LOADED'\r\nexport const FIVE_DAY_FORECAST_ERROR = 'FIVE_DAY_FORECAST_ERROR'\r\n\r\nexport const LOADING_CITIES_LIST = 'LOADING_CITIES_LIST'\r\nexport const CITIES_LIST_LOADED = 'CITIES_LIST_LOADED'\r\nexport const CITIES_LIST_ERROR = 'CITIES_LIST_ERROR'\r\n\r\nexport const GET_SELECTED_CITY = 'GET_SELECTED_CITY'\r\n\r\nexport const getPosition = () => {\r\n    return dispatch => {\r\n        dispatch({ type: FETCHING_LOCATION })\r\n        const getLatLon = function(options) {\r\n            return new Promise(function(resolve, reject) {\r\n                if (navigator.geolocation) {\r\n                    navigator.geolocation.getCurrentPosition(resolve, reject, options)\r\n                } else {\r\n                    alert('Geolocation is not enabled')\r\n                }\r\n            })\r\n        }\r\n        getLatLon()\r\n            .then(position => {\r\n                const lat = position.coords.latitude\r\n                const lon = position.coords.longitude\r\n                getGeoPosition(lat, lon).then(data =>\r\n                    dispatch({\r\n                        type: FETCHED_LOCATION,\r\n                        payload: data\r\n                    })\r\n                )\r\n            })\r\n            .catch(err =>\r\n                dispatch({\r\n                    type: LOCATION_ERROR,\r\n                    payload: err.message\r\n                })\r\n            )\r\n    }\r\n}\r\nexport const loadDailyForecast = cityKey => {\r\n    return dispatch => {\r\n        dispatch({ type: LOADING_DAILY_FORECAST })\r\n        getDailyForecast(cityKey)\r\n            .then(data => {\r\n                dispatch({\r\n                    type: DAILY_FORECAST_LOADED,\r\n                    payload: data\r\n                })\r\n            })\r\n            .catch(err =>\r\n                dispatch({\r\n                    type: DAILY_FORECAST_ERROR,\r\n                    payload: err.message\r\n                })\r\n            )\r\n    }\r\n}\r\nexport const loadFiveDayForecast = cityKey => {\r\n    return dispatch => {\r\n        dispatch({ type: LOADING_FIVE_DAY_FORECAST })\r\n        getFiveDayForecast(cityKey)\r\n            .then(data => {\r\n                dispatch({\r\n                    type: FIVE_DAY_FORECAST_LOADED,\r\n                    payload: data\r\n                })\r\n            })\r\n            .catch(err =>\r\n                dispatch({\r\n                    type: FIVE_DAY_FORECAST_ERROR,\r\n                    payload: err.message\r\n                })\r\n            )\r\n    }\r\n}\r\nexport const loadCitiesList = (inputValue, callback) => {\r\n    return dispatch => {\r\n        dispatch({ type: LOADING_CITIES_LIST })\r\n        let tempArr = []\r\n        getAutoComplete(inputValue)\r\n            .then(data => {\r\n                dispatch({\r\n                    type: CITIES_LIST_LOADED\r\n                })\r\n                data.forEach(i => {\r\n                    tempArr.push({ label: i.LocalizedName, key: i.Key })\r\n                })\r\n                callback(tempArr)\r\n            })\r\n            .catch(err =>\r\n                dispatch({\r\n                    type: CITIES_LIST_ERROR,\r\n                    payload: err.message\r\n                })\r\n            )\r\n    }\r\n}\r\nexport const getSelectedCity = selectedCity => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: GET_SELECTED_CITY,\r\n            payload: selectedCity\r\n        })\r\n    }\r\n}\r\n","export const ADD_TO_FAVORITE = 'ADD_TO_FAVORITE'\r\nexport const DELETE_FROM_FAVORITE = 'DELETE_FROM_FAVORITE'\r\nexport const LOAD_FAVORITE_LIST = 'LOAD_FAVORITE_LIST'\r\nexport const LOAD_CITY_FROM_FAVORITES = 'LOAD_CITY_FROM_FAVORITES'\r\n\r\nexport const addToFavorites = (city, cityKey) => {\r\n    return dispatch => {\r\n        dispatch({ type: ADD_TO_FAVORITE })\r\n        localStorage.setItem(city, cityKey)\r\n    }\r\n}\r\nexport const loadFavoritesList = () => {\r\n    return dispatch => {\r\n        const fav = { ...localStorage }\r\n        const items = Object.entries(fav)\r\n        dispatch({\r\n            type: LOAD_FAVORITE_LIST,\r\n            payload: items\r\n        })\r\n    }\r\n}\r\nexport const deleteFavoritesCity = value => {\r\n    return dispatch => {\r\n        localStorage.removeItem(value)\r\n        const fav = { ...localStorage }\r\n        const items = Object.entries(fav)\r\n        dispatch({\r\n            type: DELETE_FROM_FAVORITE,\r\n            payload: items\r\n        })\r\n    }\r\n}\r\nexport const loadFavoritesCity = value => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: LOAD_CITY_FROM_FAVORITES,\r\n            payload: value\r\n        })\r\n    }\r\n}\r\n","import { withStyles } from '@material-ui/core/styles'\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Container from '@material-ui/core/Container'\r\nimport Card from '@material-ui/core/Card'\r\n\r\nexport const FDIcon = withStyles({\r\n    root: {\r\n        cursor: 'pointer',\r\n        color: 'white'\r\n    }\r\n})(DeleteIcon)\r\nexport const FContainer = withStyles({\r\n    root: {\r\n        display: 'flex',\r\n        maxWidth: '38rem',\r\n        justifyContent: 'center'\r\n    }\r\n})(Container)\r\nexport const FGrid = withStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        maxHeight: '85vh',\r\n        flexWrap: 'nowrap',\r\n        padding: '0 2rem 0 2rem',\r\n        overflow: 'overlay'\r\n    }\r\n})(Grid)\r\nexport const ItemGrid = withStyles({\r\n    root: {\r\n        height: '4rem',\r\n        width: '20rem',\r\n        margin: '1rem 0 1rem 0',\r\n        padding: '1rem',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: 'transparent',\r\n        boxShadow: 'none',\r\n        border: '1px solid #526984',\r\n        borderRadius: '10px'\r\n    }\r\n})(Card)\r\nexport const FTypography = withStyles({\r\n    root: {\r\n        fontSize: '2rem',\r\n        color: 'white',\r\n        fontWeight: 500,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        cursor: 'pointer',\r\n        overflow: 'hidden',\r\n        whiteSpace: 'nowrap'\r\n    }\r\n})(Typography)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { loadFavoritesList, deleteFavoritesCity, loadFavoritesCity } from './Favorites.actions'\r\nimport { ItemGrid, FTypography, FGrid, FDIcon } from './Favorites.styles'\r\n\r\nclass Favorites extends Component {\r\n    componentDidMount() {\r\n        this.props.doLoadFavoritesList()\r\n    }\r\n    getFavoriteCityHandler = value => {\r\n        this.props.doLoadFavoritesCity(value)\r\n        this.props.history.push('/')\r\n    }\r\n    deleteFavoritesHandler = value => {\r\n        const arr = this.props.favorites\r\n        this.props.doDeleteFavoritesCity(value)\r\n        if (arr.length <= 1) {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    render() {\r\n        const favorites = this.props.favorites\r\n        return (\r\n            <FGrid container>\r\n                {favorites.map((value, key) => (\r\n                    <ItemGrid item key={key}>\r\n                        <FTypography onClick={() => this.getFavoriteCityHandler(value)}>{value[0]}</FTypography>\r\n                        <FDIcon onClick={() => this.deleteFavoritesHandler(value[0])} />\r\n                    </ItemGrid>\r\n                ))}\r\n            </FGrid>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    const { favorites } = state.favorite\r\n    return {\r\n        favorites\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        doLoadFavoritesList: () => dispatch(loadFavoritesList()),\r\n        doDeleteFavoritesCity: value => dispatch(deleteFavoritesCity(value)),\r\n        doLoadFavoritesCity: value => dispatch(loadFavoritesCity(value))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites)\r\n","import React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport Header from './Header/Header'\r\nimport Home from './Home/Home'\r\nimport Favorites from './Favorites/Favorites'\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Header />\r\n                <Switch>\r\n                    <Route exact path='/' component={Home} title='Home' />\r\n                    <Route path='/favorites' component={Favorites} title='Favorites' />\r\n                    <Route exact path='/' component={Home} />\r\n                </Switch>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default App\r\n","import React, { Component } from 'react'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport { Provider, connect } from 'react-redux'\r\n\r\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'\r\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\n\r\nimport App from './components/App'\r\nimport theme from '../src/theme/theme'\r\n\r\nclass Root extends Component {\r\n    render() {\r\n        const themeMode = this.props.themeMode\r\n        const darkTheme = createMuiTheme({\r\n            ...theme,\r\n            overrides: {\r\n                MuiCssBaseline: {\r\n                    '@global': {\r\n                        html: {\r\n                            height: '100%',\r\n                            width: '100%',\r\n                            fontSize: '10px',\r\n                            '@media (min-width:600px)': {\r\n                                fontSize: '12px'\r\n                            },\r\n                            '@media (min-width:960px)': {\r\n                                fontSize: '14px'\r\n                            },\r\n                            '@media (min-width:1280px)': {\r\n                                fontSize: '16px'\r\n                            },\r\n                            '@media (min-width:1920px)': {\r\n                                fontSize: '18px'\r\n                            }\r\n                        },\r\n                        body: {\r\n                            height: '100%',\r\n                            width: '100%',\r\n                            backgroundImage: themeMode.backGround,\r\n                            overflow: 'hidden'\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            palette: {\r\n                type: themeMode.mode\r\n            }\r\n        })\r\n        return (\r\n            <Provider store={this.props.store}>\r\n                <HashRouter>\r\n                    <MuiThemeProvider theme={darkTheme}>\r\n                        <CssBaseline />\r\n                        <App />\r\n                    </MuiThemeProvider>\r\n                </HashRouter>\r\n            </Provider>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    const { themeMode } = state.theme\r\n    return {\r\n        themeMode\r\n    }\r\n}\r\nexport default connect(mapStateToProps, null)(Root)\r\n","const logger = store => next => action => {\r\n    console.group(action.type)\r\n    console.info('dispatching', action)\r\n    let result = next(action)\r\n    console.log('next state', store.getState())\r\n    console.groupEnd()\r\n    return result\r\n}\r\nexport default logger\r\n","const round = number => Math.round(number * 100) / 100\r\n\r\nconst monitorReducerEnhancer = createStore => (reducer, initialState, enhancer) => {\r\n    const monitoredReducer = (state, action) => {\r\n        const start = performance.now()\r\n        const newState = reducer(state, action)\r\n        const end = performance.now()\r\n        const diff = round(end - start)\r\n\r\n        console.log('reducer process time:', diff)\r\n\r\n        return newState\r\n    }\r\n    return createStore(monitoredReducer, initialState, enhancer)\r\n}\r\nexport default monitorReducerEnhancer\r\n","import {\r\n    FETCHING_LOCATION,\r\n    LOCATION_ERROR,\r\n    FETCHED_LOCATION,\r\n    LOADING_DAILY_FORECAST,\r\n    DAILY_FORECAST_LOADED,\r\n    DAILY_FORECAST_ERROR,\r\n    LOADING_FIVE_DAY_FORECAST,\r\n    FIVE_DAY_FORECAST_LOADED,\r\n    FIVE_DAY_FORECAST_ERROR,\r\n    LOADING_CITIES_LIST,\r\n    CITIES_LIST_LOADED,\r\n    CITIES_LIST_ERROR,\r\n    GET_SELECTED_CITY\r\n} from './Home.actions'\r\n\r\nimport { LOAD_CITY_FROM_FAVORITES } from '../Favorites/Favorites.actions'\r\nimport { CONVERT_TO_FAHRENHEIT, CONVERT_TO_CELSIUM } from '../Home/celciumConverter.actions'\r\n\r\nlet initialState = {\r\n    cityKey: '',\r\n    city: '',\r\n    daily: [],\r\n    notification: '',\r\n    oneDay: {\r\n        date: '',\r\n        metricTemp: null,\r\n        imperialTemp: null,\r\n        text: '',\r\n        weatherIcon: null\r\n    }\r\n}\r\n\r\nexport const homeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCHING_LOCATION:\r\n            return {\r\n                ...state,\r\n                notification: 'fetching data...'\r\n            }\r\n        case FETCHED_LOCATION:\r\n            return {\r\n                ...state,\r\n                cityKey: action.payload.Key,\r\n                city: action.payload.LocalizedName,\r\n                notification: null\r\n            }\r\n        case LOCATION_ERROR:\r\n            return {\r\n                ...state,\r\n                notification: action.payload\r\n            }\r\n        case LOADING_DAILY_FORECAST:\r\n            return {\r\n                ...state,\r\n                notification: 'loading daily forecast...'\r\n            }\r\n        case DAILY_FORECAST_LOADED:\r\n            const weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n            const date = new Date(action.payload[0].LocalObservationDateTime)\r\n            const metricTemp = Math.round(action.payload[0].Temperature.Metric.Value)\r\n            const imperialTemp = action.payload[0].Temperature.Imperial.Value\r\n            const text = action.payload[0].WeatherText\r\n            const oneDayIcon = action.payload[0].WeatherIcon\r\n            return {\r\n                ...state,\r\n                oneDay: {\r\n                    date: `${weekday[date.getDay()]} ${date.getHours()}:${date.getMinutes()}`,\r\n                    metricTemp: metricTemp,\r\n                    imperialTemp: imperialTemp,\r\n                    text: text,\r\n                    weatherIcon: oneDayIcon\r\n                },\r\n                notification: null\r\n            }\r\n        case DAILY_FORECAST_ERROR:\r\n            return {\r\n                ...state,\r\n                notification: action.payload\r\n            }\r\n        case LOADING_FIVE_DAY_FORECAST:\r\n            return {\r\n                ...state,\r\n                notification: 'loading five day forecast...'\r\n            }\r\n        case FIVE_DAY_FORECAST_LOADED:\r\n            const shortWeekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n            let arr = []\r\n            action.payload.DailyForecasts.forEach(i => {\r\n                const date = new Date(i.Date)\r\n                const max = Math.round(i.Temperature.Maximum.Value)\r\n                const min = Math.round(i.Temperature.Minimum.Value)\r\n                const fiveDayIcon = i.Day.Icon\r\n                const fiveDaysArr = {\r\n                    date: `${shortWeekday[date.getDay()]}`,\r\n                    min: min,\r\n                    max: max,\r\n                    fiveDayIcon: fiveDayIcon\r\n                }\r\n                arr.push(fiveDaysArr)\r\n            })\r\n            return {\r\n                ...state,\r\n                daily: arr,\r\n                notification: null\r\n            }\r\n        case FIVE_DAY_FORECAST_ERROR:\r\n            return {\r\n                ...state,\r\n                notification: action.payload\r\n            }\r\n        case LOADING_CITIES_LIST:\r\n            return {\r\n                ...state,\r\n                notification: '...loading cities list'\r\n            }\r\n        case CITIES_LIST_LOADED:\r\n            return {\r\n                ...state,\r\n                notification: 'cities list loaded'\r\n            }\r\n        case CITIES_LIST_ERROR:\r\n            return {\r\n                ...state,\r\n                notification: action.payload\r\n            }\r\n        case GET_SELECTED_CITY:\r\n            const city = action.payload.label\r\n            const key = action.payload.key\r\n            return {\r\n                ...state,\r\n                city: city,\r\n                cityKey: key\r\n            }\r\n        case LOAD_CITY_FROM_FAVORITES:\r\n            return {\r\n                ...state,\r\n                city: action.payload[0],\r\n                cityKey: action.payload[1]\r\n            }\r\n        case CONVERT_TO_FAHRENHEIT:\r\n            return {\r\n                ...state,\r\n                daily: action.payload\r\n            }\r\n        case CONVERT_TO_CELSIUM:\r\n            return {\r\n                ...state,\r\n                daily: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { ADD_TO_FAVORITE, DELETE_FROM_FAVORITE, LOAD_FAVORITE_LIST } from './Favorites.actions'\r\n\r\nlet initialState = {\r\n    favorites: [],\r\n    notification: ''\r\n}\r\nexport const favoritesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TO_FAVORITE:\r\n            return {\r\n                ...state,\r\n                notification: 'city is added'\r\n            }\r\n        case LOAD_FAVORITE_LIST:\r\n            return {\r\n                ...state,\r\n                favorites: action.payload\r\n            }\r\n        case DELETE_FROM_FAVORITE:\r\n            return {\r\n                ...state,\r\n                favorites: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport { homeReducer } from '../components/Home/Home.reducer'\r\nimport { favoritesReducer } from '../components/Favorites/Favorites.reducer'\r\nimport { themeReducer } from '../theme/theme.reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    home: homeReducer,\r\n    favorite: favoritesReducer,\r\n    theme: themeReducer\r\n})\r\nexport default rootReducer\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport './index.css'\r\n\r\nimport Root from './Root'\r\n\r\nimport configureStore from './configureStore'\r\n\r\nimport { getPosition } from '../src/components/Home/Home.actions'\r\n\r\nconst store = configureStore()\r\n\r\nstore.dispatch(getPosition())\r\n\r\nReactDOM.render(<Root store={store} />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import { applyMiddleware, createStore } from 'redux'\r\n\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport loggerMiddleware from '../middleware/logger'\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport monitorReducersEnhancer from '../enhancers/monitorReducer'\r\n\r\nimport rootReducer from '../configureStore/root.reducer'\r\n\r\nexport default function configureStore() {\r\n    const middlewares = [thunkMiddleware, loggerMiddleware]\r\n    const middlewareEnhancer = applyMiddleware(...middlewares)\r\n\r\n    const enhancers = [middlewareEnhancer, monitorReducersEnhancer]\r\n    const composedEnhansers = composeWithDevTools(...enhancers)\r\n\r\n    const store = createStore(rootReducer, composedEnhansers)\r\n\r\n    return store\r\n}\r\n"],"sourceRoot":""}