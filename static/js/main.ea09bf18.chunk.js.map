{"version":3,"sources":["components/Header/Header.styles.js","components/Header/Header.js","API/API.js","components/Home/Home.styles.js","components/Home/Home.js","components/Favorites/Favorites.styles.js","components/Favorites/Favorites.js","components/App.js","serviceWorker.js","index.js"],"names":["HContainer","styled","AppBar","background","position","boxShadow","HTitle","Typography","color","fontWeight","flexGrow","whiteSpace","HButton","Button","marginLeft","textDecoration","AdapterLink","React","forwardRef","props","ref","innerRef","Header","Toolbar","to","component","getAutoComplete","query","a","axios","get","response","data","console","log","FSContainer","Container","display","marginTop","justifyContent","marginBottom","minWidth","FSPaper","borderRadius","Paper","flexDirection","width","FSGContainer","Input","paddingLeft","borderBottomColor","maxWidth","ItemCard","Card","height","margin","CityCard","FSGPaper","padding","FGContainer","Grid","flexWrap","FButton","FTypografy","fontSize","fontFamily","FContainer","Home","state","locationKey","selectedCity","city","key","loadData","inputValue","callback","tempArr","then","forEach","i","push","label","LocalizedName","Key","onCitySelect","setState","this","Fragment","value","loadOptions","onChange","e","container","item","CardContent","justify","map","Component","Favorites","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea09bf18.chunk.js","sourcesContent":["import { styled } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\n\r\n\r\nexport const HContainer = styled(AppBar)({\r\n    background: 'white',\r\n    position: 'static',\r\n    boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.12)'\r\n})\r\nexport const HTitle = styled(Typography)({\r\n    color: 'grey',\r\n    fontWeight: 600,\r\n    flexGrow: 1,\r\n    whiteSpace: 'nowrap'\r\n})\r\nexport const HButton = styled(Button)({\r\n    color: 'grey',\r\n    marginLeft: '5px',\r\n    textDecoration: 'none'\r\n})","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { HContainer, HTitle, HButton } from './Header.styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\n\r\nconst AdapterLink = React.forwardRef((props, ref) => <Link innerRef={ref} {...props} />)\r\nconst Header = () => {\r\n\r\n    return  <HContainer>\r\n                <Toolbar>\r\n                    <HTitle>Forecast Application</HTitle>\r\n                    <HButton to='/' component={AdapterLink}>HOME</HButton>\r\n                    <HButton to='/favorites' component={AdapterLink}>FAVORITES</HButton>\r\n                </Toolbar>\r\n            </HContainer>\r\n}\r\n\r\nexport default Header","import axios from 'axios'\r\n\r\n// const API_KEY     = process.env.REACT_APP_API_KEY\r\n// const API_HOST    = process.env.REACT_APP_API_HOST\r\n// const API_VERSION = process.env.REACT_APP_API_VERSION\r\n\r\n\r\n// const autoCompleteUrl = (query) => `${API_HOST}/locations/${API_VERSION}/cities/autocomplete?apikey=${API_KEY}=&Q=${query}`\r\n// const dailyForecastUrl = () => `${API_HOST}/currentconditions/${API_VERSION}/${key}?apikey=${API_KEY}`\r\nconst autoCompleteUrl = () => 'https://raw.githubusercontent.com/SejoB/Sergey-Bekker-04-09-2019/master/public/autoComplete.json'\r\n// const dailyForecastUrl = () => `${API_HOST}/currentconditions/${API_VERSION}/${key}?apikey=${API_KEY}`\r\n\r\n\r\nconst getAutoComplete = async (query) => {\r\n    // console.log(query)\r\n    try{\r\n            const  response = await axios.get(autoCompleteUrl(query))\r\n            const  data     = await response.data\r\n            console.log(data)\r\n            return data\r\n    }catch (error){\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport default getAutoComplete\r\n","import { styled } from '@material-ui/core/styles'\r\nimport Container from '@material-ui/core/Container'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Input from '@material-ui/core/Input'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\nexport const FSContainer = styled(Container)({\r\n    display: 'flex',\r\n    marginTop: '20px',\r\n    justifyContent: 'center',\r\n    marginBottom: '20px',\r\n    minWidth: '360px'\r\n})\r\nexport const FSButton = styled(Button)({\r\n    color: 'grey',\r\n    boxShadow: 'inset 1px 4px 20px 0px rgba(0, 0, 0, 0.14)',\r\n    borderRadius: '0px'\r\n})\r\nexport const FSPaper = styled(Paper)({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    width: '400px',\r\n    boxShadow: 'none'\r\n})\r\nexport const FSInput = styled(Input)({\r\n    paddingLeft: '10px',\r\n    '&:underline:after':{\r\n    borderBottomColor: 'none'}\r\n})\r\nexport const FSGContainer = styled(Container)({\r\n    maxWidth: '700px',\r\n    minWidth: '360px',\r\n})\r\nexport const ItemCard = styled(Card)({\r\n    height: '100px',\r\n    width: '100px',\r\n    margin: '15px 0 15px 0'\r\n})\r\nexport const CityCard = styled(Card)({\r\n    width: '100px',\r\n    height: '100px',\r\n    margin: '20px',\r\n})\r\nexport const FSGPaper = styled(Paper)({\r\n    padding: '15px'\r\n})\r\nexport const FGContainer = styled(Grid)({\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    flexWrap: 'nowrap'\r\n})\r\nexport const FButton = styled(Button)({\r\n    height: '35px',\r\n    marginTop: '20px',\r\n    whiteSpace: 'nowrap',\r\n    color: 'grey',\r\n    boxShadow: 'inset 1px 4px 20px 0px rgba(0, 0, 0, 0.14)',\r\n})\r\nexport const FTypografy = styled(Typography)({\r\n    fontSize: '3rem',\r\n    display: 'inline-block',\r\n    fontFamily: 'Oxygen',\r\n    whiteSpace: 'nowrap'\r\n})\r\nexport const FContainer = styled(Container)({\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    marginBottom: '10px'\r\n})","import React, { Component } from 'react'\r\nimport AsyncSelect from 'react-select/async'\r\nimport getAutoComplete from '../../API/API'\r\n\r\nimport { FSContainer, FSGContainer, ItemCard, CityCard, FSGPaper, FSPaper, FGContainer, FButton, FTypografy, FContainer, } from './Home.styles'\r\nimport { Grid, Typography, CardContent } from '@material-ui/core'\r\n\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    state = {\r\n        locationKey: '',\r\n        selectedCity: {\r\n            city: '',\r\n            key: ''\r\n        }\r\n    }\r\n\r\n\r\n\r\n    loadData = (inputValue, callback) => {\r\n        let tempArr = []\r\n        getAutoComplete(inputValue)\r\n            .then((data) => {\r\n                data.forEach(i => {\r\n                    tempArr.push({ label: i.LocalizedName, key: i.Key })\r\n                })\r\n                callback(tempArr)\r\n            })\r\n    }\r\n\r\n    onCitySelect = (selectedCity) => {\r\n        if (selectedCity) {\r\n            this.setState({\r\n                selectedCity: {\r\n                    city: selectedCity.label,\r\n                    key:  selectedCity.key\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { loadData, onCitySelect } = this\r\n        return (\r\n            <React.Fragment>\r\n                <FSContainer>\r\n                    <FSPaper>\r\n                        <AsyncSelect\r\n                            value={this.state.selectedCity}\r\n                            loadOptions={loadData}\r\n                            onChange={(e) => {onCitySelect(e)}}\r\n                            \r\n                        />\r\n                    </FSPaper>\r\n                </FSContainer>\r\n                <FSGContainer>\r\n                    <FSGPaper>\r\n                        <FGContainer container>\r\n                            <Grid item>\r\n                                <CityCard>\r\n                                    <CardContent>\r\n                                        <Typography>Scatterd clouds</Typography>\r\n                                    </CardContent>\r\n                                </CityCard>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <FButton>Add to Favorites</FButton>\r\n                            </Grid>\r\n                        </FGContainer>\r\n                        <FContainer>\r\n                            <FTypografy>Scatterd clouds</FTypografy>\r\n                        </FContainer>\r\n                        <Grid container justify='space-around' >\r\n                            {[0, 1, 2, 3, 4].map(value => (\r\n                                <Grid key={value} item><ItemCard></ItemCard></Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </FSGPaper>\r\n                </FSGContainer>\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import { styled } from '@material-ui/core/styles'\r\n\r\nimport Card from '@material-ui/core/Card'\r\n\r\n const ItemCard = styled(Card)({\r\n    height: '150px',\r\n    width: '100px',\r\n    margin: '15px 0 15px 0'\r\n})\r\nexport default ItemCard","import React from 'react'\r\n\r\n\r\nimport { Grid, Paper } from '@material-ui/core'\r\n\r\nimport ItemCard from './Favorites.styles'\r\n\r\n\r\n\r\nconst Favorites = () => {\r\n\r\n\r\n    return <div>\r\n        <Paper>\r\n            <Grid container justify='space-around' >\r\n                {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(value => (\r\n                    <Grid item key={value}><ItemCard></ItemCard></Grid>\r\n                ))}\r\n            </Grid>\r\n        </Paper>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Favorites","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\n\n// import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'\nimport Header from './Header/Header'\nimport Home from './Home/Home'\nimport Favorites from './Favorites/Favorites'\n\nclass App extends Component {\n\n  \n  render(){ \n  return (\n          <Router>\n            {/* <MuiThemeProvider theme={theme}> */}\n              <Header />\n\n              <Route exact path='/' component={Home} />\n              <Route path='/favorites' component={Favorites} />\n            {/* </MuiThemeProvider> */}\n          </Router>\n  )\n}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}