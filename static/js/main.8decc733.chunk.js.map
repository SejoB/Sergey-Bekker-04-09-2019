{"version":3,"sources":["serviceWorker.js","components/Header/Header.styles.js","theme/theme.reducer.js","components/Header/Header.js","API/API.js","components/Home/Home.actions.js","theme/theme.js","components/Home/Home.styles.js","components/Home/Home.js","components/Favorites/Favorites.actions.js","components/Home/celciumConverter.actions.js","components/Favorites/Favorites.styles.js","components/Favorites/Favorites.js","components/App.js","Root.js","middleware/logger.js","enhancers/monitorReducer.js","components/Home/Home.reducer.js","components/Favorites/Favorites.reducer.js","configureStore/root.reducer.js","index.js","configureStore/index.js"],"names":["Boolean","window","location","hostname","match","AppContainer","withStyles","root","position","boxShadow","backgroundColor","AppBar","HTitle","color","fontWeight","flexGrow","whiteSpace","Typography","HButton","marginLeft","textDecoration","Button","ThemeButton","border","borderRadius","ToggleButton","ThemeIcon","BrightnessMediumRoundedIcon","initialState","themeMode","mode","backGround","AdapterLink","React","forwardRef","props","ref","innerRef","Header","state","selected","changeThemeHandler","doChangeTheme","setState","this","Toolbar","to","component","value","onChange","Component","connect","dispatch","type","changeTheme","API_KEY","process","API_HOST","autoCompleteUrl","query","autoCompleteUrlGeoPosition","lat","lon","autoCompleteUrlCurrentCondition","cityKey","autoCompleteUrlFiveDay","loadDailyForecast","a","async","axios","get","response","data","console","log","getDailyForecast","then","payload","catch","err","message","loadFiveDayForecast","getFiveDayForecast","loadCitiesList","inputValue","callback","tempArr","getAutoComplete","forEach","i","push","label","LocalizedName","key","Key","theme","createMuiTheme","overrides","MuiAppBar","colorPrimary","MuiCardContent","borderBottomColor","padding","asyncStyles","container","provided","display","margin","width","control","placeholder","fontSize","menu","input","singleValue","ForecastContainer","maxWidth","flexDirection","alignItems","height","Container","OneDayGridContainer","justifyContent","minWidth","Grid","OneDayWidget","OneDayCityFavBtnGrid","flexWrap","OneDayTempIcnGrid","TypographyCity","TypographyDate","TypographyTemp","ToggleFahrCel","AvatarIcon","alignSelf","Avatar","FButton","FIcon","FavoriteIcon","FTypography","fontFamily","FiveDayGridCont","marginTop","overflow","FiveDayGridItem","marginBottom","FiveDayGrid","TypographyDay","TypographyMin","TypographyMax","Home","favColor","measure","loading","addFavoritesHandler","city","doAddFavoritesHandler","checkCityInFav","fav","localStorage","item","changeMeasurementHandler","event","newMeasure","obj","daily","doConvertCelsToFahr","doConvertFahrToCels","doLoadDailyForecast","doLoadFiveDayForecast","oneDay","setTimeout","prevProps","prevState","doLoadCitiesList","doGetSelectedCity","selectedCity","favoritesBtn","styles","loadOptions","Skeleton","variant","style","onClick","date","metricTemp","imperialTemp","ToggleButtonGroup","exclusive","size","marginRight","src","weatherIcon","alt","text","map","d","fiveDayIcon","min","max","home","notification","getSelectedCity","setItem","addToFavorites","tmp","Math","round","convertCelsToFahr","convertFahrToCels","FDIcon","cursor","DeleteIcon","FGrid","maxHeight","ItemGrid","Card","Favorites","getFavoriteCityHandler","doLoadFavoritesCity","history","deleteFavoritesHandler","arr","favorites","doDeleteFavoritesCity","length","doLoadFavoritesList","favorite","Object","entries","removeItem","deleteFavoritesCity","loadFavoritesCity","App","Fragment","exact","path","title","Root","darkTheme","MuiCssBaseline","html","body","backgroundImage","palette","store","CssBaseline","logger","next","action","group","info","result","getState","groupEnd","monitorReducerEnhancer","createStore","reducer","enhancer","number","start","performance","now","newState","end","diff","rootReducer","combineReducers","weekday","Date","LocalObservationDateTime","Temperature","Metric","Value","Imperial","WeatherText","oneDayIcon","WeatherIcon","getDay","getHours","getMinutes","shortWeekday","DailyForecasts","Maximum","Minimum","Day","Icon","fiveDaysArr","middlewares","thunkMiddleware","loggerMiddleware","enhancers","applyMiddleware","monitorReducersEnhancer","composedEnhansers","composeWithDevTools","configureStore","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","alert","getGeoPosition","coords","latitude","longitude","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8decc733.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { withStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport ToggleButton from '@material-ui/lab/ToggleButton'\r\nimport BrightnessMediumRoundedIcon from '@material-ui/icons/BrightnessMediumRounded'\r\n\r\nexport const AppContainer = withStyles({\r\n    root: {\r\n        position: 'static',\r\n        boxShadow: 'none',\r\n        backgroundColor: 'transparent'\r\n    }\r\n})(AppBar)\r\nexport const HTitle = withStyles({\r\n    root: {\r\n        color: 'grey',\r\n        fontWeight: 600,\r\n        flexGrow: 1,\r\n        whiteSpace: 'nowrap'\r\n    }\r\n})(Typography)\r\nexport const HButton = withStyles({\r\n    root: {\r\n        color: 'grey',\r\n        marginLeft: '5px',\r\n        textDecoration: 'none',\r\n        fontWeight: 400\r\n    }\r\n})(Button)\r\nexport const ThemeButton = withStyles({\r\n    root: {\r\n        border: 'none',\r\n        borderRadius: '25px'\r\n    }\r\n})(ToggleButton)\r\nexport const ThemeIcon = withStyles({\r\n    root: {}\r\n})(BrightnessMediumRoundedIcon)\r\n","const DARK_THEME = 'DARK_THEME'\r\nconst LIGHT_THEME = 'LIGHT_THEME'\r\n\r\nlet initialState = {\r\n    themeMode: {\r\n        mode: 'light',\r\n        backGround: 'linear-gradient(to bottom right, #36516f, #394655, #2b3541)'\r\n    }\r\n}\r\nexport const changeTheme = selected => {\r\n    return dispatch => {\r\n        if (!selected) {\r\n            dispatch({ type: DARK_THEME })\r\n        } else {\r\n            dispatch({ type: LIGHT_THEME })\r\n        }\r\n    }\r\n}\r\nexport const themeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LIGHT_THEME:\r\n            return {\r\n                ...state,\r\n                themeMode: {\r\n                    mode: 'light',\r\n                    backGround: 'linear-gradient(to bottom right, #36516f, #394655, #2b3541)'\r\n                }\r\n            }\r\n        case DARK_THEME:\r\n            return {\r\n                ...state,\r\n                themeMode: {\r\n                    mode: 'dark',\r\n                    backGround: 'linear-gradient(to bottom right, #333030, #303030, #1d1b1b)'\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { AppContainer, HTitle, HButton, ThemeButton, ThemeIcon } from './Header.styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\n\r\nimport { changeTheme } from '../../theme/theme.reducer'\r\n\r\nconst AdapterLink = React.forwardRef((props, ref) => <Link innerRef={ref} {...props} />)\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        selected: false\r\n    }\r\n    changeThemeHandler = () => {\r\n        let selected = this.state.selected\r\n        if (!selected) {\r\n            this.props.doChangeTheme(selected)\r\n            this.setState({\r\n                selected: true\r\n            })\r\n        } else {\r\n            this.props.doChangeTheme(selected)\r\n            this.setState({\r\n                selected: false\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const { selected } = this.state\r\n        return (\r\n            <AppContainer>\r\n                <Toolbar>\r\n                    <HTitle>Forecast Application</HTitle>\r\n                    <HButton to='/' component={AdapterLink}>\r\n                        HOME\r\n                    </HButton>\r\n                    <HButton to='/favorites' component={AdapterLink}>\r\n                        FAVORITES\r\n                    </HButton>\r\n                    <ThemeButton value='ThemeIcon' onChange={this.changeThemeHandler} selected={selected}>\r\n                        <ThemeIcon />\r\n                    </ThemeButton>\r\n                </Toolbar>\r\n            </AppContainer>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        doChangeTheme: selected => dispatch(changeTheme(selected))\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(Header)\r\n","import axios from 'axios'\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY\r\nconst API_HOST = process.env.REACT_APP_API_HOST\r\nconst API_VERSION = process.env.REACT_APP_API_VERSION\r\n\r\nconst autoCompleteUrl = query => `${ API_HOST }/locations/${ API_VERSION }/cities/autocomplete?apikey=${ API_KEY }&q=${ query }`\r\nconst autoCompleteUrlGeoPosition = ( lat, lon ) => `${ API_HOST }/locations/${ API_VERSION }/cities/geoposition/search?apikey=${ API_KEY }&q=${ lat }%20%2C%20${ lon }%20&toplevel=false`\r\nconst autoCompleteUrlCurrentCondition = cityKey => `${ API_HOST }/currentconditions/${ API_VERSION }/${ cityKey }?apikey=${ API_KEY }`\r\nconst autoCompleteUrlFiveDay = cityKey => `${ API_HOST }/forecasts/${ API_VERSION }/daily/5day/${ cityKey }?apikey=${ API_KEY }&metric=true`\r\n\r\nconst mockUpAutoCompleteUrl = () => 'https://raw.githubusercontent.com/SejoB/Sergey-Bekker-04-09-2019/master/public/autoComplete.json'\r\nconst mockUpAutoCompleteUrlGeoPosition = () => 'https://raw.githubusercontent.com/SejoB/Sergey-Bekker-04-09-2019/master/public/currentWeather.json'\r\nconst mockUpAutoCompleteUrlCurrentCondition = () => 'https://raw.githubusercontent.com/SejoB/Sergey-Bekker-04-09-2019/master/public/currentWeather.json'\r\nconst mockUpAutoCompleteUrlFiveDay = () => 'https://raw.githubusercontent.com/SejoB/Sergey-Bekker-04-09-2019/master/public/5dayWeather.json'\r\n\r\nexport const getAutoComplete = async query => {\r\n    try {\r\n        const response = await axios.get( autoCompleteUrl( query ) )\r\n        const data = await response.data\r\n        return data\r\n    } catch ( error ) {\r\n        const response = await axios.get( mockUpAutoCompleteUrl( query ) )\r\n        const data = await response.data\r\n        console.log( error, 'Loading mockUp API' )\r\n        return data\r\n    }\r\n}\r\nexport const getGeoPosition = async ( lat, lon ) => {\r\n    try {\r\n        const response = await axios.get( autoCompleteUrlGeoPosition( lat, lon ) )\r\n        const data = await response.data\r\n        return data\r\n    } catch ( error ) {\r\n        const response = await axios.get( mockUpAutoCompleteUrlGeoPosition( lat, lon ) )\r\n        const data = await response.data\r\n        console.log( error, 'Loading mockUp API' )\r\n        return data\r\n    }\r\n}\r\nexport const getDailyForecast = async cityKey => {\r\n    try {\r\n        const response = await axios.get( autoCompleteUrlCurrentCondition( cityKey ) )\r\n        const data = await response.data\r\n        return data\r\n    } catch ( error ) {\r\n        const response = await axios.get( mockUpAutoCompleteUrlCurrentCondition( cityKey ) )\r\n        const data = await response.data\r\n        console.log( error, 'Loading mockUp API' )\r\n        return data\r\n    }\r\n}\r\nexport const getFiveDayForecast = async cityKey => {\r\n    try {\r\n        const response = await axios.get( autoCompleteUrlFiveDay( cityKey ) )\r\n        const data = await response.data\r\n        return data\r\n    } catch ( error ) {\r\n        const response = await axios.get( mockUpAutoCompleteUrlFiveDay( cityKey ) )\r\n        const data = await response.data\r\n        console.log( error, 'Loading mockUp API' )\r\n        return data\r\n    }\r\n}\r\n","import { getDailyForecast, getFiveDayForecast, getGeoPosition, getAutoComplete } from '../../API/API'\r\n\r\nexport const FETCHING_LOCATION = 'FETCHING_LOCATION'\r\nexport const FETCHED_LOCATION = 'FETCHED_LOCATION'\r\nexport const LOCATION_ERROR = 'LOCATION_ERROR'\r\n\r\nexport const LOADING_DAILY_FORECAST = 'LOADING_DAILY_FORECAST'\r\nexport const DAILY_FORECAST_LOADED = 'DAILY_FORECAST_LOADED'\r\nexport const DAILY_FORECAST_ERROR = 'DAILY_FORECAST_ERROR'\r\n\r\nexport const LOADING_FIVE_DAY_FORECAST = 'LOADING_FIVE_DAY_FORECAST'\r\nexport const FIVE_DAY_FORECAST_LOADED = 'FIVE_DAY_FORECAST_LOADED'\r\nexport const FIVE_DAY_FORECAST_ERROR = 'FIVE_DAY_FORECAST_ERROR'\r\n\r\nexport const LOADING_CITIES_LIST = 'LOADING_CITIES_LIST'\r\nexport const CITIES_LIST_LOADED = 'CITIES_LIST_LOADED'\r\nexport const CITIES_LIST_ERROR = 'CITIES_LIST_ERROR'\r\n\r\nexport const GET_SELECTED_CITY = 'GET_SELECTED_CITY'\r\n\r\nexport const getPosition = () => {\r\n    return dispatch => {\r\n        dispatch( { type: FETCHING_LOCATION } )\r\n        const getLatLon = function ( options ) {\r\n            return new Promise( function ( resolve, reject ) {\r\n                if ( navigator.geolocation ) {\r\n                    navigator.geolocation.getCurrentPosition( resolve, reject, options )\r\n                } else {\r\n                    alert( 'Geolocation is not enabled' )\r\n                }\r\n            } )\r\n        }\r\n        getLatLon()\r\n            .then( position => {\r\n                const lat = position.coords.latitude\r\n                const lon = position.coords.longitude\r\n                getGeoPosition( lat, lon ).then( data =>\r\n                    dispatch( {\r\n                        type: FETCHED_LOCATION,\r\n                        payload: data\r\n                    } )\r\n                )\r\n            } )\r\n            .catch( err =>\r\n                dispatch( {\r\n                    type: LOCATION_ERROR,\r\n                    payload: err.message\r\n                } )\r\n            )\r\n    }\r\n}\r\nexport const loadDailyForecast = cityKey => {\r\n    return dispatch => {\r\n        dispatch( { type: LOADING_DAILY_FORECAST } )\r\n        getDailyForecast( cityKey )\r\n            .then( data => {\r\n                dispatch( {\r\n                    type: DAILY_FORECAST_LOADED,\r\n                    payload: data\r\n                } )\r\n            } )\r\n            .catch( err =>\r\n                dispatch( {\r\n                    type: DAILY_FORECAST_ERROR,\r\n                    payload: err.message\r\n                } )\r\n            )\r\n    }\r\n}\r\nexport const loadFiveDayForecast = cityKey => {\r\n    return dispatch => {\r\n        dispatch( { type: LOADING_FIVE_DAY_FORECAST } )\r\n        getFiveDayForecast( cityKey )\r\n            .then( data => {\r\n                dispatch( {\r\n                    type: FIVE_DAY_FORECAST_LOADED,\r\n                    payload: data\r\n                } )\r\n            } )\r\n            .catch( err =>\r\n                dispatch( {\r\n                    type: FIVE_DAY_FORECAST_ERROR,\r\n                    payload: err.message\r\n                } )\r\n            )\r\n    }\r\n}\r\nexport const loadCitiesList = ( inputValue, callback ) => {\r\n    return dispatch => {\r\n        dispatch( { type: LOADING_CITIES_LIST } )\r\n        let tempArr = []\r\n        getAutoComplete( inputValue )\r\n            .then( data => {\r\n                dispatch( {\r\n                    type: CITIES_LIST_LOADED\r\n                } )\r\n                data.forEach( i => {\r\n                    tempArr.push( { label: i.LocalizedName, key: i.Key } )\r\n                } )\r\n                callback( tempArr )\r\n            } )\r\n            .catch( err =>\r\n                dispatch( {\r\n                    type: CITIES_LIST_ERROR,\r\n                    payload: err.message\r\n                } )\r\n            )\r\n    }\r\n}\r\nexport const getSelectedCity = selectedCity => {\r\n    return dispatch => {\r\n        dispatch( {\r\n            type: GET_SELECTED_CITY,\r\n            payload: selectedCity\r\n        } )\r\n    }\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        MuiAppBar: {\r\n            root: {\r\n                border: 'none',\r\n                boxShadow: 'none'\r\n            },\r\n            colorPrimary: {\r\n                backgroundColor: 'transparent'\r\n            }\r\n        },\r\n        MuiCardContent: {\r\n            root: {\r\n                borderBottomColor: 'none',\r\n                '&:last-child': {\r\n                    padding: '1rem !important'\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\nexport const asyncStyles = {\r\n    container: provided => ({\r\n        ...provided,\r\n        display: 'flex',\r\n        margin: '1.25rem 0',\r\n        width: '30rem'\r\n    }),\r\n    control: provided => ({\r\n        ...provided,\r\n        width: '100%',\r\n        backgroundColor: 'transparent',\r\n        border: '1px solid #526984',\r\n        borderRadius: '10px'\r\n    }),\r\n    placeholder: provided => ({\r\n        ...provided,\r\n        fontSize: '1.2rem'\r\n    }),\r\n    menu: provided => ({\r\n        ...provided,\r\n        fontSize: '1.2rem',\r\n        color: '#808080',\r\n        backgroundColor: 'transparent',\r\n        fontWeight: 500\r\n    }),\r\n    input: provided => ({\r\n        ...provided,\r\n        fontSize: '1rem',\r\n        color: '#808080'\r\n    }),\r\n    singleValue: provided => ({\r\n        ...provided,\r\n        color: '#808080',\r\n        fontSize: '1.2rem'\r\n    })\r\n}\r\nexport default theme\r\n","import { withStyles } from '@material-ui/core/styles'\r\nimport Container from '@material-ui/core/Container'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport ToggleButton from '@material-ui/lab/ToggleButton'\r\n\r\nexport const ForecastContainer = withStyles( {\r\n    root: {\r\n        maxWidth: '70%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '0 0 2rem',\r\n        borderRadius: '25px',\r\n        border: '1px solid #526984',\r\n        alignItems: 'center',\r\n        '@media (max-width: 670px)': {\r\n            border: 'none',\r\n            maxWidth: '100%',\r\n            height: '100%'\r\n        }\r\n    }\r\n} )( Container )\r\nexport const OneDayGridContainer = withStyles( {\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        minWidth: '16.875rem',\r\n        padding: '0 1.6rem 2rem',\r\n        '@media (max-width: 670px)': {\r\n            width: '100%',\r\n            padding: '0 1rem'\r\n        }\r\n    }\r\n} )( Grid )\r\nexport const OneDayWidget = withStyles( {\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minWidth: '42%',\r\n        padding: '10px 20px',\r\n        borderRadius: '25px',\r\n        border: '1px solid #526984',\r\n        '@media (max-width: 670px)': {\r\n            width: '100%'\r\n        }\r\n    }\r\n} )( Grid )\r\nexport const OneDayCityFavBtnGrid = withStyles( {\r\n    root: {\r\n        justifyContent: 'space-between',\r\n        flexWrap: 'nowrap',\r\n        display: 'flex'\r\n    }\r\n} )( Grid )\r\nexport const OneDayTempIcnGrid = withStyles( {\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    }\r\n} )( Grid )\r\nexport const TypographyCity = withStyles( {\r\n    root: {\r\n        fontSize: '2rem',\r\n        color: 'white',\r\n        fontWeight: 500,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap'\r\n    }\r\n} )( Typography )\r\nexport const TypographyDate = withStyles( {\r\n    root: {\r\n        fontSize: '1.5rem',\r\n        color: 'white',\r\n        fontWeight: 100\r\n    }\r\n} )( Typography )\r\nexport const TypographyTemp = withStyles( {\r\n    root: {\r\n        display: 'inline-flex',\r\n        fontSize: '5.5rem',\r\n        alignItems: 'center',\r\n        color: 'white',\r\n        fontWeight: 100\r\n    }\r\n} )( Typography )\r\nexport const ToggleFahrCel = withStyles( {\r\n    root: {\r\n        fontSize: '1.3rem',\r\n        fontWeight: 300,\r\n        color: 'grey'\r\n    }\r\n} )( ToggleButton )\r\nexport const AvatarIcon = withStyles( {\r\n    root: {\r\n        alignSelf: 'center'\r\n    }\r\n} )( Avatar )\r\nexport const FButton = withStyles( {\r\n    root: {\r\n        whiteSpace: 'nowrap',\r\n        color: 'white',\r\n        borderRadius: '10px',\r\n        border: '1px solid #526984',\r\n        '@media (max-width: 670px)': {\r\n            display: 'none'\r\n        }\r\n    }\r\n} )( Button )\r\nexport const FIcon = withStyles( {\r\n    root: {\r\n        display: 'none',\r\n        '@media (max-width: 670px)': {\r\n            display: 'inline-block',\r\n            fontSize: '2.5rem'\r\n        }\r\n    }\r\n} )( FavoriteIcon )\r\nexport const FTypography = withStyles( {\r\n    root: {\r\n        fontSize: '2rem',\r\n        display: 'flex',\r\n        fontFamily: 'inherit',\r\n        alignItems: 'center',\r\n        color: 'white',\r\n        justifyContent: 'flex-end'\r\n    }\r\n} )( Typography )\r\nexport const FiveDayGridCont = withStyles( {\r\n    root: {\r\n        justifyContent: 'space-evenly',\r\n        display: 'flex',\r\n        marginTop: '3rem',\r\n        flexWrap: 'nowrap',\r\n        '@media (max-width: 670px)': {\r\n            flexDirection: 'column',\r\n            overflow: 'scroll',\r\n            height: '50vh',\r\n            flexWrap: 'inherit',\r\n            justifyContent: 'flex-start',\r\n            marginTop: '1rem',\r\n            padding: '0 1rem'\r\n        }\r\n    }\r\n} )( Grid )\r\n\r\nexport const FiveDayGridItem = withStyles( {\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '20px',\r\n        minWidth: '9rem',\r\n        borderRadius: '25px',\r\n        border: '1px solid #526984',\r\n        '@media (max-width: 670px)': {\r\n            marginBottom: '1rem'\r\n        }\r\n    }\r\n} )( Grid )\r\nexport const FiveDayGrid = withStyles( {\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    }\r\n} )( Grid )\r\nexport const TypographyDay = withStyles( {\r\n    root: {\r\n        fontWeight: 500,\r\n        color: 'white',\r\n        alignSelf: 'center',\r\n        fontSize: '2rem'\r\n    }\r\n} )( Typography )\r\nexport const TypographyMin = withStyles( {\r\n    root: {\r\n        fontWeight: 400,\r\n        color: 'white',\r\n        alignSelf: 'center',\r\n        fontSize: '1.5rem'\r\n    }\r\n} )( Typography )\r\nexport const TypographyMax = withStyles( {\r\n    root: {\r\n        fontWeight: 400,\r\n        color: 'white',\r\n        alignSelf: 'center',\r\n        fontSize: '1.5rem'\r\n    }\r\n} )( Typography )\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { loadDailyForecast, loadFiveDayForecast, loadCitiesList, getSelectedCity } from './Home.actions'\r\nimport { addToFavorites } from '../Favorites/Favorites.actions'\r\nimport { convertCelsToFahr, convertFahrToCels } from '../Home/celciumConverter.actions'\r\n\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup'\r\nimport { Grid } from '@material-ui/core'\r\nimport AsyncSelect from 'react-select/async'\r\n\r\nimport { asyncStyles } from '../../theme/theme'\r\nimport {\r\n    FIcon,\r\n    AvatarIcon,\r\n    OneDayWidget,\r\n    OneDayCityFavBtnGrid,\r\n    OneDayTempIcnGrid,\r\n    TypographyCity,\r\n    FiveDayGrid,\r\n    FiveDayGridCont,\r\n    FiveDayGridItem,\r\n    TypographyDate,\r\n    TypographyTemp,\r\n    ForecastContainer,\r\n    OneDayGridContainer,\r\n    FButton,\r\n    FTypography,\r\n    TypographyDay,\r\n    TypographyMax,\r\n    TypographyMin,\r\n    ToggleFahrCel\r\n} from './Home.styles'\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nclass Home extends Component {\r\n    state = {\r\n        favColor: false,\r\n        measure: 'celsium',\r\n        loading: true\r\n    }\r\n    componentDidMount () {\r\n        const { city, cityKey, doLoadDailyForecast, doLoadFiveDayForecast, daily, oneDay } = this.props\r\n        if ( daily && oneDay ) {\r\n            setTimeout( () => {\r\n                return this.setState( {\r\n                    loading: false\r\n                } )\r\n            }, 2500 )\r\n        }\r\n        if ( cityKey ) {\r\n            doLoadFiveDayForecast( cityKey )\r\n            doLoadDailyForecast( cityKey )\r\n        }\r\n        if ( city ) {\r\n            this.checkCityInFav( city )\r\n        }\r\n    }\r\n    componentDidUpdate ( prevProps, prevState ) {\r\n        const { city, cityKey, doLoadDailyForecast, doLoadFiveDayForecast } = this.props\r\n        if ( this.props.cityKey !== prevProps.cityKey ) {\r\n            doLoadFiveDayForecast( cityKey )\r\n            doLoadDailyForecast( cityKey )\r\n        }\r\n        if ( this.props.city !== prevProps.city ) {\r\n            this.checkCityInFav( city )\r\n        }\r\n    }\r\n    addFavoritesHandler = () => {\r\n        const { city, cityKey, doAddFavoritesHandler } = this.props\r\n        doAddFavoritesHandler( city, cityKey )\r\n        this.setState( {\r\n            favColor: true\r\n        } )\r\n    }\r\n    checkCityInFav = city => {\r\n        let fav = { ...localStorage }\r\n        for ( let item in fav ) {\r\n            if ( item === city ) {\r\n                return this.setState( {\r\n                    favColor: true\r\n                } )\r\n            } else {\r\n                this.setState( {\r\n                    favColor: false\r\n                } )\r\n            }\r\n        }\r\n    }\r\n    changeMeasurementHandler = ( event, newMeasure ) => {\r\n        const obj = this.props.daily\r\n        switch ( newMeasure ) {\r\n            case 'fahrenheit':\r\n                this.props.doConvertCelsToFahr( obj )\r\n                return this.setState( {\r\n                    measure: 'fahrenheit'\r\n                } )\r\n            case 'celsium':\r\n                this.props.doConvertFahrToCels( obj )\r\n                return this.setState( {\r\n                    measure: 'celsium'\r\n                } )\r\n            default:\r\n                return this.state\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const { oneDay, daily, city } = this.props\r\n        const { doLoadCitiesList, doGetSelectedCity, selectedCity } = this.props\r\n        const { favColor, measure, loading } = this.state\r\n        const favoritesBtn = { color: favColor ? 'red' : '' }\r\n        return (\r\n            <ForecastContainer>\r\n                <AsyncSelect styles={ asyncStyles } value={ selectedCity } loadOptions={ doLoadCitiesList } onChange={ doGetSelectedCity } />\r\n                <OneDayGridContainer container>\r\n                    <OneDayWidget item>\r\n                        <OneDayCityFavBtnGrid item>\r\n                            { loading ? (\r\n                                <Skeleton\r\n                                    variant='text'\r\n                                    width={ 190 }\r\n                                    style={ {\r\n                                        fontSize: '2rem',\r\n                                        borderRadius: '10px'\r\n                                    } }\r\n                                />\r\n                            ) : (\r\n                                    <>\r\n                                        <TypographyCity>{ city ? city : 'City' }</TypographyCity>\r\n                                        <FIcon\r\n                                            style={ {\r\n                                                color: favColor ? 'red' : '',\r\n                                                alignSelf: 'center'\r\n                                            } }\r\n                                            onClick={ this.addFavoritesHandler }\r\n                                        />\r\n                                    </>\r\n                                ) }\r\n                        </OneDayCityFavBtnGrid>\r\n                        { loading ? (\r\n                            <Skeleton\r\n                                variant='text'\r\n                                width={ 120 }\r\n                                style={ {\r\n                                    fontSize: '1.5rem',\r\n                                    borderRadius: '10px'\r\n                                } }\r\n                            />\r\n                        ) : (\r\n                                <TypographyDate>{ oneDay.date }</TypographyDate>\r\n                            ) }\r\n                        <OneDayTempIcnGrid container>\r\n                            <div style={ { display: 'flex', justifyContent: 'space-evenly' } }>\r\n                                { loading ? (\r\n                                    <Skeleton\r\n                                        variant='text'\r\n                                        width={ 200 }\r\n                                        style={ {\r\n                                            fontSize: '5.5rem',\r\n                                            borderRadius: '10px'\r\n                                        } }\r\n                                    />\r\n                                ) : (\r\n                                        <TypographyTemp>{ measure === 'celsium' ? oneDay.metricTemp : oneDay.imperialTemp }</TypographyTemp>\r\n                                    ) }\r\n                                { loading ? null : (\r\n                                    <ToggleButtonGroup\r\n                                        exclusive\r\n                                        onChange={ this.changeMeasurementHandler }\r\n                                        value={ measure }\r\n                                        size='medium'\r\n                                        style={ {\r\n                                            alignSelf: 'center',\r\n                                            backgroundColor: 'transparent'\r\n                                        } }\r\n                                    >\r\n                                        <ToggleFahrCel value='celsium'>{ 'C°' }</ToggleFahrCel>\r\n                                        <ToggleFahrCel value='fahrenheit'>{ 'F°' }</ToggleFahrCel>\r\n                                    </ToggleButtonGroup>\r\n                                ) }\r\n                            </div>\r\n                            { loading ? (\r\n                                <div\r\n                                    style={ {\r\n                                        display: 'flex',\r\n                                        justifyContent: 'flex-end'\r\n                                    } }\r\n                                >\r\n                                    <Skeleton\r\n                                        variant='circle'\r\n                                        width={ 40 }\r\n                                        height={ 40 }\r\n                                        style={ {\r\n                                            marginRight: '14px'\r\n                                        } }\r\n                                    />\r\n                                    <Skeleton\r\n                                        variant='text'\r\n                                        width={ 120 }\r\n                                        style={ {\r\n                                            fontSize: '2rem',\r\n                                            borderRadius: '10px'\r\n                                        } }\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                    <FTypography component='div'>\r\n                                        <AvatarIcon src={ 'https://raw.githubusercontent.com/SejoB/Sergey-Bekker-04-09-2019/master/public/weatherIcons/' + oneDay.weatherIcon + '-s.png' } alt='icon' />\r\n                                        { oneDay.text }\r\n                                    </FTypography>\r\n                                ) }\r\n                        </OneDayTempIcnGrid>\r\n                    </OneDayWidget>\r\n                    <Grid item>\r\n                        <FButton style={ favoritesBtn } onClick={ this.addFavoritesHandler }>\r\n                            Add to Favorites\r\n                        </FButton>\r\n                    </Grid>\r\n                </OneDayGridContainer>\r\n                <FiveDayGridCont container>\r\n                    { daily.map( ( d, key ) => {\r\n                        return (\r\n                            <FiveDayGridItem key={ key } item>\r\n                                { loading ? (\r\n                                    <Skeleton variant='circle' style={ { width: '40px', height: '40px', alignSelf: 'center' } } />\r\n                                ) : (\r\n                                        <AvatarIcon src={ 'https://raw.githubusercontent.com/SejoB/Sergey-Bekker-04-09-2019/master/public/weatherIcons/' + d.fiveDayIcon + '-s.png' } alt='icon' />\r\n                                    ) }\r\n                                { loading ? <Skeleton variant='text' style={ { height: '48px', width: '54px', borderRadius: '10px', alignSelf: 'center' } } /> : <TypographyDay>{ d.date }</TypographyDay> }\r\n                                { loading ? (\r\n                                    <Skeleton variant='text' style={ { height: '35px', width: '102px', borderRadius: '10px', alignSelf: 'center' } } />\r\n                                ) : (\r\n                                        <FiveDayGrid container>\r\n                                            <TypographyMin>\r\n                                                { d.min }\r\n                                                { '°' }\r\n                                            </TypographyMin>\r\n                                            <TypographyMax>\r\n                                                { d.max }\r\n                                                { '°' }\r\n                                            </TypographyMax>\r\n                                        </FiveDayGrid>\r\n                                    ) }\r\n                            </FiveDayGridItem>\r\n                        )\r\n                    } ) }\r\n                </FiveDayGridCont>\r\n            </ForecastContainer>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    const { cityKey, city, oneDay, daily, notification } = state.home\r\n    return {\r\n        cityKey,\r\n        city,\r\n        oneDay,\r\n        daily,\r\n        notification\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        doLoadDailyForecast: cityKey => dispatch( loadDailyForecast( cityKey ) ),\r\n        doLoadFiveDayForecast: cityKey => dispatch( loadFiveDayForecast( cityKey ) ),\r\n        doLoadCitiesList: ( inputValue, callback ) => dispatch( loadCitiesList( inputValue, callback ) ),\r\n        doGetSelectedCity: selectedCity => dispatch( getSelectedCity( selectedCity ) ),\r\n        doAddFavoritesHandler: ( city, cityKey ) => dispatch( addToFavorites( city, cityKey ) ),\r\n        doConvertCelsToFahr: obj => dispatch( convertCelsToFahr( obj ) ),\r\n        doConvertFahrToCels: obj => dispatch( convertFahrToCels( obj ) )\r\n    }\r\n}\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Home )\r\n","export const ADD_TO_FAVORITE = 'ADD_TO_FAVORITE'\r\nexport const DELETE_FROM_FAVORITE = 'DELETE_FROM_FAVORITE'\r\nexport const LOAD_FAVORITE_LIST = 'LOAD_FAVORITE_LIST'\r\nexport const LOAD_CITY_FROM_FAVORITES = 'LOAD_CITY_FROM_FAVORITES'\r\n\r\nexport const addToFavorites = ( city, cityKey ) => {\r\n    return dispatch => {\r\n        dispatch( { type: ADD_TO_FAVORITE } )\r\n        localStorage.setItem( city, cityKey )\r\n    }\r\n}\r\nexport const loadFavoritesList = () => {\r\n    return dispatch => {\r\n        const fav = { ...localStorage }\r\n        const items = Object.entries( fav )\r\n        dispatch( {\r\n            type: LOAD_FAVORITE_LIST,\r\n            payload: items\r\n        } )\r\n    }\r\n}\r\nexport const deleteFavoritesCity = value => {\r\n    return dispatch => {\r\n        localStorage.removeItem( value )\r\n        const fav = { ...localStorage }\r\n        const items = Object.entries( fav )\r\n        dispatch( {\r\n            type: DELETE_FROM_FAVORITE,\r\n            payload: items\r\n        } )\r\n    }\r\n}\r\nexport const loadFavoritesCity = value => {\r\n    return dispatch => {\r\n        dispatch( {\r\n            type: LOAD_CITY_FROM_FAVORITES,\r\n            payload: value\r\n        } )\r\n    }\r\n}\r\n","export const CONVERT_TO_CELSIUM = 'CONVERT_TO_CELSIUM'\r\nexport const CONVERT_TO_FAHRENHEIT = 'CONVERT_TO_FAHRENHEIT'\r\n\r\nexport const convertCelsToFahr = obj => {\r\n    return dispatch => {\r\n        const tmp = []\r\n        obj.forEach(i => {\r\n            const min = Math.round(i.min * 1.8 + 32)\r\n            const max = Math.round(i.max * 1.8 + 32)\r\n            const obj = {\r\n                ...i,\r\n                min: min,\r\n                max: max\r\n            }\r\n            return tmp.push(obj)\r\n        })\r\n        dispatch({\r\n            type: CONVERT_TO_FAHRENHEIT,\r\n            payload: tmp\r\n        })\r\n    }\r\n}\r\nexport const convertFahrToCels = obj => {\r\n    return dispatch => {\r\n        const tmp = []\r\n        obj.forEach(i => {\r\n            const min = Math.round((i.min - 32) * 0.555)\r\n            const max = Math.round((i.max - 32) * 0.555)\r\n            const obj = {\r\n                ...i,\r\n                min: min,\r\n                max: max\r\n            }\r\n            return tmp.push(obj)\r\n        })\r\n        dispatch({\r\n            type: CONVERT_TO_FAHRENHEIT,\r\n            payload: tmp\r\n        })\r\n    }\r\n}\r\n","import { withStyles } from '@material-ui/core/styles'\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\n\r\nexport const FDIcon = withStyles( {\r\n    root: {\r\n        cursor: 'pointer',\r\n        color: 'white'\r\n    }\r\n} )( DeleteIcon )\r\nexport const FGrid = withStyles( {\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        maxHeight: '85vh',\r\n        flexWrap: 'nowrap',\r\n        padding: '0 2rem 0 2rem',\r\n        overflow: 'overlay'\r\n    }\r\n} )( Grid )\r\nexport const ItemGrid = withStyles( {\r\n    root: {\r\n        height: '4rem',\r\n        width: '20rem',\r\n        margin: '1rem 0 1rem 0',\r\n        padding: '1rem',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: 'transparent',\r\n        boxShadow: 'none',\r\n        border: '1px solid #526984',\r\n        borderRadius: '10px'\r\n    }\r\n} )( Card )\r\nexport const FTypography = withStyles( {\r\n    root: {\r\n        fontSize: '2rem',\r\n        color: 'white',\r\n        fontWeight: 500,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        cursor: 'pointer',\r\n        overflow: 'hidden',\r\n        whiteSpace: 'nowrap'\r\n    }\r\n} )( Typography )\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { loadFavoritesList, deleteFavoritesCity, loadFavoritesCity } from './Favorites.actions'\r\nimport { ItemGrid, FTypography, FGrid, FDIcon } from './Favorites.styles'\r\n\r\nclass Favorites extends Component {\r\n    componentDidMount () {\r\n        this.props.doLoadFavoritesList()\r\n    }\r\n    getFavoriteCityHandler = value => {\r\n        this.props.doLoadFavoritesCity( value )\r\n        this.props.history.push( '/' )\r\n    }\r\n    deleteFavoritesHandler = value => {\r\n        const arr = this.props.favorites\r\n        this.props.doDeleteFavoritesCity( value )\r\n        if ( arr.length <= 1 ) {\r\n            this.props.history.push( '/' )\r\n        }\r\n    }\r\n    render () {\r\n        const favorites = this.props.favorites\r\n        return (\r\n            <FGrid container>\r\n                { favorites.map( ( value, key ) => (\r\n                    <ItemGrid key={ key }>\r\n                        <FTypography onClick={ () => this.getFavoriteCityHandler( value ) }>{ value[ 0 ] }</FTypography>\r\n                        <FDIcon onClick={ () => this.deleteFavoritesHandler( value[ 0 ] ) } />\r\n                    </ItemGrid>\r\n                ) ) }\r\n            </FGrid>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    const { favorites } = state.favorite\r\n    return {\r\n        favorites\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        doLoadFavoritesList: () => dispatch( loadFavoritesList() ),\r\n        doDeleteFavoritesCity: value => dispatch( deleteFavoritesCity( value ) ),\r\n        doLoadFavoritesCity: value => dispatch( loadFavoritesCity( value ) )\r\n    }\r\n}\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Favorites )\r\n","import React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport Header from './Header/Header'\r\nimport Home from './Home/Home'\r\nimport Favorites from './Favorites/Favorites'\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Header />\r\n                <Switch>\r\n                    <Route exact path='/' component={Home} title='Home' />\r\n                    <Route path='/favorites' component={Favorites} title='Favorites' />\r\n                    <Route exact path='/' component={Home} />\r\n                </Switch>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default App\r\n","import React, { Component } from 'react'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport { Provider, connect } from 'react-redux'\r\n\r\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'\r\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\n\r\nimport App from './components/App'\r\nimport theme from '../src/theme/theme'\r\n\r\nclass Root extends Component {\r\n    render () {\r\n        const themeMode = this.props.themeMode\r\n        const darkTheme = createMuiTheme( {\r\n            ...theme,\r\n            overrides: {\r\n                MuiCssBaseline: {\r\n                    '@global': {\r\n                        html: {\r\n                            height: '100%',\r\n                            width: '100%',\r\n                            fontSize: '10px',\r\n                            '@media (min-width:670px)': {\r\n                                fontSize: '10px'\r\n                            },\r\n                            '@media (min-width:770px)': {\r\n                                fontSize: '12px'\r\n                            },\r\n                            '@media (min-width:960px)': {\r\n                                fontSize: '14px'\r\n                            },\r\n                            '@media (min-width:1280px)': {\r\n                                fontSize: '16px'\r\n                            },\r\n                            '@media (min-width:1920px)': {\r\n                                fontSize: '18px'\r\n                            }\r\n                        },\r\n                        body: {\r\n                            height: '100%',\r\n                            width: '100%',\r\n                            backgroundImage: themeMode.backGround,\r\n                            overflow: 'hidden'\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            palette: {\r\n                type: themeMode.mode\r\n            }\r\n        } )\r\n        return (\r\n            <Provider store={ this.props.store }>\r\n                <HashRouter>\r\n                    <MuiThemeProvider theme={ darkTheme }>\r\n                        <CssBaseline />\r\n                        <App />\r\n                    </MuiThemeProvider>\r\n                </HashRouter>\r\n            </Provider>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    const { themeMode } = state.theme\r\n    return {\r\n        themeMode\r\n    }\r\n}\r\nexport default connect( mapStateToProps, null )( Root )\r\n","const logger = store => next => action => {\r\n    console.group(action.type)\r\n    console.info('dispatching', action)\r\n    let result = next(action)\r\n    console.log('next state', store.getState())\r\n    console.groupEnd()\r\n    return result\r\n}\r\nexport default logger\r\n","const round = number => Math.round(number * 100) / 100\r\n\r\nconst monitorReducerEnhancer = createStore => (reducer, initialState, enhancer) => {\r\n    const monitoredReducer = (state, action) => {\r\n        const start = performance.now()\r\n        const newState = reducer(state, action)\r\n        const end = performance.now()\r\n        const diff = round(end - start)\r\n\r\n        console.log('reducer process time:', diff)\r\n\r\n        return newState\r\n    }\r\n    return createStore(monitoredReducer, initialState, enhancer)\r\n}\r\nexport default monitorReducerEnhancer\r\n","import {\r\n    FETCHING_LOCATION,\r\n    LOCATION_ERROR,\r\n    FETCHED_LOCATION,\r\n    LOADING_DAILY_FORECAST,\r\n    DAILY_FORECAST_LOADED,\r\n    DAILY_FORECAST_ERROR,\r\n    LOADING_FIVE_DAY_FORECAST,\r\n    FIVE_DAY_FORECAST_LOADED,\r\n    FIVE_DAY_FORECAST_ERROR,\r\n    LOADING_CITIES_LIST,\r\n    CITIES_LIST_LOADED,\r\n    CITIES_LIST_ERROR,\r\n    GET_SELECTED_CITY\r\n} from './Home.actions'\r\n\r\nimport { LOAD_CITY_FROM_FAVORITES } from '../Favorites/Favorites.actions'\r\nimport { CONVERT_TO_FAHRENHEIT, CONVERT_TO_CELSIUM } from '../Home/celciumConverter.actions'\r\n\r\nlet initialState = {\r\n    cityKey: '',\r\n    city: '',\r\n    daily: [],\r\n    notification: '',\r\n    oneDay: {\r\n        date: '',\r\n        metricTemp: null,\r\n        imperialTemp: null,\r\n        text: '',\r\n        weatherIcon: null\r\n    }\r\n}\r\n\r\nexport const homeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCHING_LOCATION:\r\n            return {\r\n                ...state,\r\n                notification: 'fetching data...'\r\n            }\r\n        case FETCHED_LOCATION:\r\n            return {\r\n                ...state,\r\n                cityKey: action.payload.Key,\r\n                city: action.payload.LocalizedName,\r\n                notification: null\r\n            }\r\n        case LOCATION_ERROR:\r\n            return {\r\n                ...state,\r\n                notification: action.payload\r\n            }\r\n        case LOADING_DAILY_FORECAST:\r\n            return {\r\n                ...state,\r\n                notification: 'loading daily forecast...'\r\n            }\r\n        case DAILY_FORECAST_LOADED:\r\n            const weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n            const date = new Date(action.payload[0].LocalObservationDateTime)\r\n            const metricTemp = Math.round(action.payload[0].Temperature.Metric.Value)\r\n            const imperialTemp = action.payload[0].Temperature.Imperial.Value\r\n            const text = action.payload[0].WeatherText\r\n            const oneDayIcon = action.payload[0].WeatherIcon\r\n            return {\r\n                ...state,\r\n                oneDay: {\r\n                    date: `${weekday[date.getDay()]} ${date.getHours()}:${date.getMinutes()}`,\r\n                    metricTemp: metricTemp,\r\n                    imperialTemp: imperialTemp,\r\n                    text: text,\r\n                    weatherIcon: oneDayIcon\r\n                },\r\n                notification: null\r\n            }\r\n        case DAILY_FORECAST_ERROR:\r\n            return {\r\n                ...state,\r\n                notification: action.payload\r\n            }\r\n        case LOADING_FIVE_DAY_FORECAST:\r\n            return {\r\n                ...state,\r\n                notification: 'loading five day forecast...'\r\n            }\r\n        case FIVE_DAY_FORECAST_LOADED:\r\n            const shortWeekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n            let arr = []\r\n            action.payload.DailyForecasts.forEach(i => {\r\n                const date = new Date(i.Date)\r\n                const max = Math.round(i.Temperature.Maximum.Value)\r\n                const min = Math.round(i.Temperature.Minimum.Value)\r\n                const fiveDayIcon = i.Day.Icon\r\n                const fiveDaysArr = {\r\n                    date: `${shortWeekday[date.getDay()]}`,\r\n                    min: min,\r\n                    max: max,\r\n                    fiveDayIcon: fiveDayIcon\r\n                }\r\n                arr.push(fiveDaysArr)\r\n            })\r\n            return {\r\n                ...state,\r\n                daily: arr,\r\n                notification: null\r\n            }\r\n        case FIVE_DAY_FORECAST_ERROR:\r\n            return {\r\n                ...state,\r\n                notification: action.payload\r\n            }\r\n        case LOADING_CITIES_LIST:\r\n            return {\r\n                ...state,\r\n                notification: '...loading cities list'\r\n            }\r\n        case CITIES_LIST_LOADED:\r\n            return {\r\n                ...state,\r\n                notification: 'cities list loaded'\r\n            }\r\n        case CITIES_LIST_ERROR:\r\n            return {\r\n                ...state,\r\n                notification: action.payload\r\n            }\r\n        case GET_SELECTED_CITY:\r\n            const city = action.payload.label\r\n            const key = action.payload.key\r\n            return {\r\n                ...state,\r\n                city: city,\r\n                cityKey: key\r\n            }\r\n        case LOAD_CITY_FROM_FAVORITES:\r\n            return {\r\n                ...state,\r\n                city: action.payload[0],\r\n                cityKey: action.payload[1]\r\n            }\r\n        case CONVERT_TO_FAHRENHEIT:\r\n            return {\r\n                ...state,\r\n                daily: action.payload\r\n            }\r\n        case CONVERT_TO_CELSIUM:\r\n            return {\r\n                ...state,\r\n                daily: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { ADD_TO_FAVORITE, DELETE_FROM_FAVORITE, LOAD_FAVORITE_LIST } from './Favorites.actions'\r\n\r\nlet initialState = {\r\n    favorites: [],\r\n    notification: ''\r\n}\r\nexport const favoritesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TO_FAVORITE:\r\n            return {\r\n                ...state,\r\n                notification: 'city is added'\r\n            }\r\n        case LOAD_FAVORITE_LIST:\r\n            return {\r\n                ...state,\r\n                favorites: action.payload\r\n            }\r\n        case DELETE_FROM_FAVORITE:\r\n            return {\r\n                ...state,\r\n                favorites: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport { homeReducer } from '../components/Home/Home.reducer'\r\nimport { favoritesReducer } from '../components/Favorites/Favorites.reducer'\r\nimport { themeReducer } from '../theme/theme.reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    home: homeReducer,\r\n    favorite: favoritesReducer,\r\n    theme: themeReducer\r\n})\r\nexport default rootReducer\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport './index.css'\r\n\r\nimport Root from './Root'\r\n\r\nimport configureStore from './configureStore'\r\n\r\nimport { getPosition } from '../src/components/Home/Home.actions'\r\n\r\nconst store = configureStore()\r\n\r\nstore.dispatch(getPosition())\r\n\r\nReactDOM.render(<Root store={store} />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import { applyMiddleware, createStore } from 'redux'\r\n\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport loggerMiddleware from '../middleware/logger'\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport monitorReducersEnhancer from '../enhancers/monitorReducer'\r\n\r\nimport rootReducer from '../configureStore/root.reducer'\r\n\r\nexport default function configureStore() {\r\n    const middlewares = [thunkMiddleware, loggerMiddleware]\r\n    const middlewareEnhancer = applyMiddleware(...middlewares)\r\n\r\n    const enhancers = [middlewareEnhancer, monitorReducersEnhancer]\r\n    const composedEnhansers = composeWithDevTools(...enhancers)\r\n\r\n    const store = createStore(rootReducer, composedEnhansers)\r\n\r\n    return store\r\n}\r\n"],"sourceRoot":""}